package com.jeanpower.reggieproject;

/**
 * Game Presenter
 * <p>
 * Deals with game logic, creating instructions, editing instructions, running game<p>
 * 
 * <p>
 * @author Jean Power 2014
 */

import java.util.ArrayList;
import java.util.List;

import android.annotation.SuppressLint;
import android.os.AsyncTask;
import android.os.Build;
import android.util.Log;
import android.view.View;

public class Game{

	private Instruction first;
	private Instruction last;
	private Instruction lastBox;
	private Instruction currPos;
	private int[] registers;
	private final MainActivity activity;
	private final int MAXREGISTERS = 10;
	private Instruction prevPos = null;
	private int boxAbove;
	private int boxBelow;
	private Game game = this;

	/**
	 * Constructor. Zeros all registers, instantiates instance variables.
	 * <p>
	 * @param MainActivity 
	 */
	public Game(MainActivity a) {
		activity = a;
		first = null;
		last = null;
		registers = new int[MAXREGISTERS];

		for (int i = 0; i < MAXREGISTERS; i++) {
			registers[i] = 0;
		}
	}

	/**
	 * Checks if errors in program on screen and runs game
	 * <p>
	 * Uses anonymous inner class RunGame
	 * <p>
	 * @param void
	 * @return void
	 */
	public void runGame() {

		boolean canRun = this.errorChecking();

		if (canRun){
			currPos = first;
			RunGame rungame = new RunGame();
			rungame.execute();
		}

		else {
			this.resetButton(); //Reset the run button back to "Run" if game cannot run
		}
	}


	public void resetButton(){
		activity.resetRunButton();
	}
	
	public void saveLoadClick(){

		boolean canRun = this.errorChecking();

		if (canRun){
			SaveLoad sl = new SaveLoad(activity.getApplicationContext(), this);
			sl.saveLoad();
		}
	}

	public boolean errorChecking(){

		ErrorCheck ec = new ErrorCheck(this, activity);
		boolean ok = ec.checkErrors();

		return ok;
	}

	public int findArrow(){

		ArrayList<Instruction> instructions = getInstructionList();

		int arrowId = -1;

		for(Instruction i: instructions){

			if (i instanceof Arrow){
				arrowId = i.getId();
			}
		}

		return arrowId;
	}

	public int findBox(){

		ArrayList<Instruction> instructions = getInstructionList();

		int boxId = -1;

		for(Instruction i: instructions){

			if (i instanceof Box){
				boxId = i.getId();
			}
		}

		return boxId;
	}

	/**
	 * Wipes Game data and resets registers to zero
	 * <p>
	 * @param void
	 * @return void
	 */
	public void clearAll(){
		first = null;
		last = null;
		lastBox = null;
		currPos = null;
		prevPos = null;

		for (int i = 0; i<MAXREGISTERS; i++){
			this.zeroReg(i);
		}
		activity.clearScreen();
	}
	
	public void clearActivityScreen(){
		
		activity.clearScreen();
		activity.updateDisplay();
	}

	/**
	 * Iterates through linked list of instructions, returns list of
	 * instructions in correct order, from a certain point in list
	 * <p>
	 * 
	 * @param int. Targeted point of instruction
	 * @return List<Instruction>
	 */
	public ArrayList<Instruction> getInstructionList() {

		ArrayList<Instruction> instructionList = new ArrayList<Instruction>();

		Instruction currentPosition = first;

		while (null != currentPosition) {

			instructionList.add(currentPosition);
			currentPosition = currentPosition.getSucc();
		}
		return instructionList;
	}

	public List<Instruction> getToFrom(Instruction from, int to) {

		List<Instruction> instructionList = new ArrayList<Instruction>();

		Instruction current = from;
		int target = to;
		boolean done = false;

		while (null != current && !done) {

			instructionList.add(current);

			if (current.getId() == target) {
				done = true;
			}

			else {

				current = current.getSucc();
			}
		}
		return instructionList;
	}

	public Instruction getInstruction(int ID) {

		Instruction currentPosition = first;
		int targetInstruction = ID;
		boolean found = false;

		while (null != currentPosition && !found) {

			if (targetInstruction == currentPosition.getId()) {
				found = true;
			}

			else {
				currentPosition = currentPosition.getSucc();
			}
		}

		return currentPosition;
	}

	@SuppressLint("NewApi")
	// Have dealt with different versions in code.
	public Instruction newInstruction(int resourceID) {

		Instruction instruction = null;

		switch (resourceID) {
		case R.id.new_arrow_button:
			instruction = new Arrow(this);
			break;
		case R.id.new_box_button:
			instruction = new Box(this);
			lastBox = instruction;
			break;
		case R.id.new_end_button:
			instruction = new End(this);
			break;
		}

		if (null == first) // Can only be a box.
		{
			first = instruction;
			last = instruction;
			instruction.setSucc(null);
		}

		else {


			if (instruction instanceof Box){ //No instruction before a box impacts box

				last.setSucc(instruction);
				instruction.setPred(last);
				last = instruction;
			}

			else if (instruction instanceof Arrow){

				Arrow arrow = (Arrow) instruction;
				arrow.setTo(lastBox);

				if (last instanceof Arrow || last instanceof Box){

					last.setSucc(instruction);
					instruction.setPred(last);
					last = instruction;
				}

				else if (last instanceof End){

					Instruction endPred = last.getPred(); //Arrow always gets added prior to any end instruction.

					while (endPred instanceof End){//In case of multiple end instructions

						endPred = endPred.getPred();
					}

					endPred.setSucc(instruction);
					instruction.setPred(endPred);
					last.setPred(instruction);
					instruction.setSucc(last);	
				}
			}

			else if (instruction instanceof End){

				if (last instanceof Arrow || last instanceof Box){ //If there is already an end, will not be added
					last.setSucc(instruction);
					instruction.setPred(last);
					last = instruction;
				}
			}
		}

		if (Build.VERSION.SDK_INT >= 17) {
			instruction.setId(View.generateViewId());
		}

		else {
			instruction.setId(Util.generateViewId());
		}

		return instruction;
	}


	/**
	 * Updates Box instruction to new register. Updates End instruction to a new Box.
	 * <p>
	 * @param Instruction to be updated
	 * @return void
	 */

	public void updateInstruction(Instruction i) {

		if (i instanceof Box) {
			Box box = (Box) i;
			box.setRegister();
			activity.updateColour(box.getId(), box.getRegister());
		}

		else if (i instanceof End){

			Instruction prev = i.getPred();
			End end = (End) i;

			while (prev instanceof Arrow || prev instanceof End){

				prev = prev.getPred(); //Found currentBox end sits in
			}

			prev = prev.getPred(); //To find next previous box

			while (prev instanceof Arrow || prev instanceof End){

				prev = prev.getPred();
			}

			if (null == prev){

				this.deleteInstruction(end); //If it's already at the first Box, delete (arrow cannot be in first place)
			}

			else {

				Box prevBox = (Box) prev;
				Instruction boxSucc = prevBox.getSucc();
				Instruction endPred = end.getPred();
				Instruction endSucc = end.getSucc();

				endPred.setSucc(endSucc);

				if (null != endSucc){

					endSucc.setPred(endPred); 
				}

				else {

					last = endPred;
				}

				if (boxSucc instanceof Arrow){					

					Instruction arrowSucc = boxSucc.getSucc();
					Instruction arrowPred = boxSucc;

					while (arrowSucc instanceof Arrow){
						arrowPred = arrowSucc;
						arrowSucc = arrowSucc.getSucc();
					}

					arrowPred.setSucc(end);
					end.setSucc(arrowSucc); //End moves between arrow and arrow succ, not between box and arrow
					end.setPred(arrowPred);

					if (null != arrowSucc)
					{
						arrowSucc.setPred(end);
					}
				}

				else {

					prevBox.setSucc(end);
					end.setSucc(boxSucc); //Else end moves between two instructions
					end.setPred(prevBox);

					if (null != boxSucc){
						boxSucc.setPred(end);
					}
				}
			}
		}
	}


	/**
	 * Assesses if the head of the arrow can move
	 * <p>
	 * To prevent issues with an Arrow having predecessors which are incorrect in relation to its goto, 
	 * this method reviews if the goto is the same as the predecessor, or before (if loop), or after (if branch).
	 * These are acceptable scenarios.
	 * <p>
	 * @param Arrow that is checked, ID of the Box that the head should move to.
	 * @return boolean
	 */
	public boolean headMove(Arrow from, int to) {

		boolean move = false;
		Instruction currentPosition = from;

		while (null != currentPosition && !move) {

			if (currentPosition.getId() == to) { // Allows for pred/goto to be the same
				move = true;
			}

			else {

				if (from.getType()){

					currentPosition = currentPosition.getPred();
				}

				else 
				{
					currentPosition = currentPosition.getSucc();
				}
			}
		}

		return move;
	}

	public void updateHead(Arrow arrow, Box move) {

		if (move.getId() == arrow.getTo().getId()){
			activity.showMessage(activity.getString(R.string.already)); //Error check for already pointing 
		}

		else if (!arrow.getType() && arrow.getPred().getId() == move.getId()){
			activity.showMessage(activity.getString(R.string.error3)); //Error check for trying to make branch to itself
		}

		else {
			boolean canMove = this.headMove(arrow, move.getId());
			if (canMove) {

				arrow.setTo(move);
				arrow.calculateSpaces();
			}
		}
	}


	/**
	 * Assesses if the tail of the arrow can move
	 * <p>
	 * To prevent issues with an Arrow having predecessors which are incorrect in relation to its goto, 
	 * this method reviews if the predecessor is the same as the goto, or after (if loop), or before (if branch).
	 * These are acceptable scenarios.
	 * <p>
	 * @param Arrow that is checked, ID of the Box that becomes the predecessor.
	 * @return boolean
	 */

	public boolean tailMove(Arrow from, int to) {

		boolean move = false;
		Instruction currentPosition = from.getTo();

		while (null != currentPosition && !move) {

			if (currentPosition.getId() == to) { // Allows for pred/goto to be the same
				move = true;
			}

			else {

				if (from.getType()){

					currentPosition = currentPosition.getSucc();
				}

				else 
				{
					currentPosition = currentPosition.getPred();
				}
			}
		}

		return move;
	}


	public void updateTail(Arrow arrow, Box move) {

		if (move.getId() == arrow.getPred().getId()){
			activity.showMessage(activity.getString(R.string.coming));
		}

		else if (!arrow.getType() && arrow.getTo().getId() == move.getId()){
			activity.showMessage(activity.getString(R.string.error3));
		}

		else {	

			boolean canMove = this.tailMove(arrow, move.getId()); // Is the box before the head of arrow?

			if (canMove) {

				Instruction arrowPred = arrow.getPred();
				Instruction arrowSucc = arrow.getSucc();
				Instruction boxSucc = move.getSucc();
				Arrow boxSuccArrow = null;

				if (boxSucc instanceof Arrow){

					boxSuccArrow = (Arrow) boxSucc;
				}

				arrowPred.setSucc(arrowSucc);

				if (null != arrowSucc) {
					arrowSucc.setPred(arrowPred);
				}

				else {
					last = arrowPred;
				}

				//Branch will always move in before a loop
				if (!arrow.getType() || boxSucc instanceof Box || boxSucc instanceof End || null == boxSucc || (arrow.getType() && null!= boxSuccArrow && boxSuccArrow.getType())){
					arrow.setPred(move);
					move.setSucc(arrow);
					arrow.setSucc(boxSucc); //Instruction inserts before successor - arrow will not move past end, or after an end instruction

					if (null != boxSucc) {
						boxSucc.setPred(arrow); 
					}
				}

				else if (arrow.getType() && null != boxSuccArrow && !boxSuccArrow.getType()){ //Loops come after branches

					arrow.setPred(boxSuccArrow);
					arrow.setSucc(boxSuccArrow.getSucc());

					if (null != boxSuccArrow.getSucc()){
						boxSuccArrow.getSucc().setPred(arrow);
					}
					boxSuccArrow.setSucc(arrow);	
				}

				if (null == arrow.getSucc()){
					last = arrow;
				}

				arrow.calculateSpaces();
			}
		}
	}
	/**
	 * Changes Box instruction to inc or dec. Changes Arrow instruction to loop or branch.
	 * <p>
	 * @param Instruction to be updated
	 * @return void
	 */
	public void changeInstruction(Instruction i) {

		if (i instanceof Box) {
			Box box = (Box) i;
			box.setType();
		}

		else if (i instanceof Arrow) {

			Arrow arrow = (Arrow) i;
			Instruction pred = arrow.getPred();
			Instruction succ = arrow.getSucc();
			Instruction goTo = arrow.getTo();
			Instruction goToSucc = goTo.getSucc();
			Arrow succArrow = null;

			if (goToSucc instanceof Arrow){
				succArrow = (Arrow) goToSucc;
			}

			arrow.setType();

			if (goToSucc instanceof End || goToSucc instanceof Box || null == goToSucc || !arrow.getType() || (arrow.getType() && null != succArrow && succArrow.getType())){

				if (pred.getId() != goTo.getId()){

					arrow.setPred(goTo);
					goTo.setSucc(arrow);
					arrow.setSucc(goToSucc);
					pred.setSucc(succ);

					if (null != goToSucc) {

						goToSucc.setPred(arrow);
					}

					if (null != succ) {

						succ.setPred(pred);
					}

					else {
						last = pred;
					}
				}
			}

			else if (arrow.getType() && null != succArrow && !succArrow.getType()){

				arrow.setPred(succArrow);
				arrow.setSucc(succArrow.getSucc());

				if (null != succArrow.getSucc()){
					succArrow.setPred(arrow);
				}

				succArrow.setSucc(arrow);	
			}

			if (null == arrow.getSucc()){
				last = arrow;
			}

			arrow.calculateSpaces();
		}
	}

	public void deleteInstruction(Instruction inst){
		List<Instruction> instructionList = this.getInstructionList();
		int countBox = 0;
		Instruction succ = inst.getSucc();
		Instruction pred = inst.getPred();

		for (Instruction i: instructionList){

			if (i instanceof Box){
				countBox ++;
			}

			if (i instanceof Arrow){
				Arrow arrow = (Arrow) i;

				if (arrow.getTo().getId() == inst.getId()){ //If an arrow is pointing at a deleted instruction, reset.
					arrow.setTo(arrow.getPred());
				}
			}
		}

		if (countBox == 1 && inst instanceof Box){ //If this is the last box on screen, clear screen
			this.clearAll();
		}

		else {

			if (inst instanceof Box){

				if (inst.getId() == lastBox.getId()){

					Instruction previousBox = inst.getPred();

					while (previousBox instanceof Arrow || previousBox instanceof End){
						previousBox = previousBox.getPred();
					}

					lastBox = (Box) previousBox;
				}

				while (succ instanceof Arrow || succ instanceof End){
					activity.removeInstruction(succ.getId());

					if (null != pred){

						succ = succ.getSucc();
						pred.setSucc(succ);

					}
					else {

						succ.setPred(null);
						succ = succ.getSucc();
					}
				}
			}

			if (null != succ){
				succ.setPred(pred);
			}

			else {
				last = pred;			
			}

			if (null != pred){
				pred.setSucc(succ);

			}
			else {
				first = succ;
			}

			activity.removeInstruction(inst.getId());
		}
	}

	/**
	 * Sets current position within running game
	 * <p>
	 * 
	 * @param Instruction. New current instruction
	 * @return void
	 */
	public void setCurrPos(Instruction newPos) {

		currPos = newPos;
	}

	/**
	 * Returns data held in specific register
	 * <p>
	 * @param int. Index/number of register.
	 * @return int
	 */
	public int getRegData(int registerNum) {

		return registers[registerNum];
	}

	/**
	 * Increments data held in specific register
	 * <p>
	 * Increments, then calls method in activity to pull data and update UI
	 * <p>
	 * 
	 * @param int. Index/number of register.
	 * @return void
	 */
	public void incrementReg(int registerNum) {

		int newNum = registers[registerNum] + 1;
		registers[registerNum] = newNum;

	}

	/**
	 * Decrements data held in specific register
	 * <p>
	 * Decrements, then calls method in activity to pull data and update UI
	 * <p>
	 * 
	 * @param int. Index/number of register.
	 * @return void
	 */
	public boolean decrementReg(int registerNum) {

		if (registers[registerNum] >=1){
			int newNum = registers[registerNum] - 1;
			registers[registerNum] = newNum;
			return true;
		}

		else {
			return false;
		}
	}

	/**
	 * Zeros a specific register
	 * <p>
	 * @param int. Index/number of register.
	 * @return void
	 */
	public void zeroReg(int registerNum) {

		registers[registerNum] = 0;
	}

	public int getMaxReg() {
		return MAXREGISTERS;
	}


	public Instruction getPrevPos(){
		return prevPos;
	}


	private void updateActivityDisplay(){

		if (prevPos instanceof Box){
			activity.updateInstructionDisplay(prevPos.getId(), prevPos.getRegister());
		}
		else if (prevPos instanceof Arrow){
			activity.updateInstructionDisplay(prevPos.getId(), -1);//Arrow does not have associated register
		}
	}

	private class RunGame extends AsyncTask<Void, Void, Void>{

		@Override
		protected Void doInBackground(Void... params) {

			while (null != currPos){

				if (currPos instanceof Box){

					prevPos = currPos;
					currPos.doWork();

					game.updateActivityDisplay();

					try {
						Thread.sleep(1000);
						game.updateActivityDisplay();
					}
					catch (Exception e){
						Log.d("This was interrupted", "interrupted");
					}	

				}

				else if (currPos instanceof Arrow){

					Arrow currArrow = (Arrow) currPos;

					prevPos = currPos;
					currPos.doWork();

					boolean setSucc = currArrow.getIfSet();

					if (currArrow.getType() && !setSucc || !currArrow.getType() && !setSucc){

						game.updateActivityDisplay(); 

						try {
							Thread.sleep(1000);
							game.updateActivityDisplay();
						}
						catch (Exception e){
							Log.d("This was interrupted", "interrupted");
						}	

					}
				}

				else {
					currPos.doWork();
				}
			}
			game.resetButton();
			return null;
		}
	}

	public void setFirst(Instruction f){
		first = f;
	}

	public void setLast(Instruction l){
		last = l;
	}

	public int getFirst(){
		return first.getId();
	}

	public int getLast(){
		return last.getId();
	}

	public void setLastBox(Instruction lb){
		lastBox = lb;
	}

	public int getAbove(){
		return boxAbove;
	}

	public int getBelow(){
		return boxBelow;
	}

	public void showActivityMessage(String message){
		activity.showMessage(message);
	}

	public void setAboveBelow(){

		Instruction curr = first;

		boxAbove = -1;
		boxBelow = -1;
		boolean doneAbove = false;
		boolean doneBelow = false;

		while (null != curr && (!doneAbove || !doneBelow)){

			if (curr instanceof Box) {

				Box b = (Box) curr;

				if (b.getType()) {

					boxAbove = b.getId();
					doneAbove = true;
				}

				if (!b.getType()) {
					boxBelow = b.getId();
					doneBelow = true;
				}
			}
			curr = curr.getSucc();
		}
	}
}