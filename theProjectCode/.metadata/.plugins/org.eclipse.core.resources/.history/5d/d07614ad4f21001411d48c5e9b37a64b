
package com.jeanpower.reggieproject;

import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.CornerPathEffect;
import android.graphics.LinearGradient;
import android.graphics.Paint;
import android.graphics.Path;
import android.graphics.PathEffect;
import android.graphics.PorterDuff.Mode;
import android.util.Log;

public class DrawArrow {
	Paint paint = new Paint();
	Path pathBefore = new Path();
	Path pathAfter = new Path();
	int startColour;
	int endColour;
	LinearGradient lg;
	int numberButtons;
	Arrow arrow;
	boolean loop;
	float arrowWidth;
	float arrowHeight;
	Context context;

	public DrawArrow(Arrow a, int width, int height, Context con){

		paint.setStrokeWidth(6);
		paint.setStyle(Paint.Style.STROKE); 
		context = con;
		

		arrow = a;
		numberButtons = arrow.getSpaces();
		loop = arrow.getType();
		arrowWidth = width;
		arrowHeight = height;
	}
	
	public void setColours(int startC, int endC){
		startColour = startC;
		endColour = endC;
	}

	public Bitmap getImage(){

		Bitmap bitmap = Bitmap.createBitmap(((int) arrowWidth * numberButtons), (int) arrowHeight, Bitmap.Config.RGB_565);
		bitmap.setHasAlpha(true);
		Canvas canvas = new Canvas(bitmap);
		
		PathEffect effect = new CornerPathEffect(3.0f);
		paint.setPathEffect(effect);

		if (loop){
			
			if (numberButtons <= 1){
				pathBefore.moveTo((arrowWidth * numberButtons)/2 + arrowWidth/4, arrowHeight);
				pathBefore.lineTo((arrowWidth * numberButtons)/2, arrowHeight/2);
				pathBefore.lineTo((arrowWidth * numberButtons)/2 + arrowWidth/4, 0);
			}

			else {
				pathBefore.moveTo(arrowWidth - arrowWidth/3, arrowHeight);
				pathBefore.lineTo(arrowWidth - arrowWidth/3, arrowHeight/2);
				pathBefore.lineTo((arrowWidth * numberButtons)/2, arrowHeight/2);
				
				pathAfter.moveTo((arrowWidth * numberButtons)/2 + arrowWidth/4, arrowHeight);
				pathAfter.lineTo((arrowWidth * numberButtons)/2, arrowHeight/2);
				pathAfter.lineTo((arrowWidth * numberButtons)/2 + arrowWidth/4, 0);
				pathAfter.lineTo((arrowWidth * numberButtons)/2, arrowHeight/2);
				pathAfter.lineTo((arrowWidth * numberButtons) - arrowWidth/3, arrowHeight/2);
				pathAfter.lineTo((arrowWidth * numberButtons) - arrowWidth/3, arrowHeight);		
			}
			
			paint.setColor(endColour);
			
			canvas.drawColor(0, Mode.CLEAR);
			canvas.drawPath(pathBefore, paint);
			
			if (numberButtons > 1){
				paint.setColor(startColour);
				canvas.drawPath(pathAfter, paint);
			}
		}

		else {

			if (numberButtons <= 1){
				pathBefore.moveTo((arrowWidth * numberButtons)/2, arrowHeight);
				pathBefore.lineTo((arrowWidth * numberButtons)/2 + arrowWidth/4, arrowHeight/2);
				pathBefore.lineTo((arrowWidth * numberButtons)/2, 0);

			}
			
			else {
				pathBefore.moveTo(arrowWidth/3, 0);
				pathBefore.lineTo(arrowWidth/3, arrowHeight/2);
				pathBefore.lineTo((arrowWidth * numberButtons)/2 + arrowWidth/4, arrowHeight/2);
				
				pathAfter.moveTo((arrowWidth * numberButtons)/2, arrowHeight);
				pathAfter.lineTo((arrowWidth * numberButtons)/2 + arrowWidth/4, arrowHeight/2);
				pathAfter.lineTo((arrowWidth * numberButtons)/2, 0);
				pathAfter.lineTo((arrowWidth * numberButtons)/2 + arrowWidth/4, arrowHeight/2);
				
				pathAfter.lineTo((arrowWidth * numberButtons) - arrowWidth/3, arrowHeight/2);
				pathAfter.lineTo((arrowWidth * numberButtons) - arrowWidth/3, 0);
			}
			
			paint.setColor(startColour);
			
			canvas.drawColor(0, Mode.CLEAR);
			canvas.drawPath(pathBefore, paint);
			
			if (numberButtons > 1){
				paint.setColor(endColour);
				canvas.drawPath(pathAfter, paint);
			}
		}


		paint.setColor(startColour);
		
		canvas.drawColor(0, Mode.CLEAR);
		canvas.drawPath(pathBefore, paint);
		
		if (numberButtons > 1){
			paint.setColor(endColour);
			canvas.drawPath(pathAfter, paint);
		}

		return bitmap;
	}
}