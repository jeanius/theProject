//View - handles UI components and events

package com.jeanpower.reggieproject;

import java.util.List;

import android.os.Build;
import android.os.Bundle;
import android.annotation.SuppressLint;
import android.app.Activity;
import android.content.DialogInterface;
import android.content.DialogInterface.OnClickListener;
import android.content.res.Configuration;
import android.gesture.GestureOverlayView.OnGestureListener;
import android.graphics.Color;
import android.graphics.ColorFilter;
import android.graphics.PorterDuffColorFilter;
import android.graphics.drawable.Drawable;
import android.graphics.drawable.LayerDrawable;
import android.text.Layout;
import android.util.Log;
import android.view.DragEvent;
import android.view.Menu;
import android.view.View;
import android.view.View.OnLongClickListener;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.app.ActionBar;
import android.graphics.PorterDuff;

public class MainActivity extends Activity implements View.OnClickListener, View.OnLongClickListener{

	private Game game;
	private int[] registerColours;
	private String[] registerNames;
	private int[] registerIds;
	
	/**
	 * Called when application is opened.                  
	 * <p>
	 * Sets the view to first screen, adds register buttons
	 * Adds listeners to activity buttons
	 * <p>
	 * @return void
	 */
	@SuppressLint("NewApi")
	@Override
	protected void onCreate(Bundle savedInstanceState) {

		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main); 
		game = new Game(this);

		//Array of colours, from color.xml
		registerColours = getResources().getIntArray(R.array.rainbow);
		registerNames = getResources().getStringArray(R.array.register_names);		
		
		LinearLayout container = (LinearLayout) findViewById(R.id.register_frame);
		LinearLayout.LayoutParams lp = new LinearLayout.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT, LinearLayout.LayoutParams.WRAP_CONTENT); 
		
		//To give black border
		lp.setMargins(1, 1, 1, 1); 
		container.setBackgroundColor(Color.BLACK);

		for (int i = 0; i<game.MAXREGISTERS; i++){
			
			Button button = (Button) findViewById(getResourceId(registerNames[i]));
			button.setText(game.getRegData(i) + ""); //Set initial text to 0			
			button.setLayoutParams(lp); //For wrap content	
		
			button.setBackgroundColor(registerColours[i]);	
			//button.setId(registerNames[i]);
			
			Log.d("This is the button id", button.getId() + "");
			
			button.setOnClickListener(this);
			button.setOnLongClickListener(this);
			container.addView(button); //Add to register frame
		}

		//Add listeners to activity buttons. //TODO Is there a better way to do this?
		Button arrowButton = (Button) findViewById(R.id.new_arrow_button);
		arrowButton.setOnClickListener(this);	

		Button runButton = (Button) findViewById(R.id.run_button);
		runButton.setOnClickListener(this);

		Button boxButton = (Button) findViewById(R.id.new_box_button);
		boxButton.setOnClickListener(this);

		Button endButton = (Button) findViewById(R.id.new_end_button);
		endButton.setOnClickListener(this);
	}

	/**
	 * Inflates the menu and adds items                 
	 * <p>
	 * @param Menu. Menu which has items added
	 * @return boolean
	 */
	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		// TODO Add help, save, return

		getMenuInflater().inflate(R.menu.main, menu);
		return true;
	}

	/**
	 * To ignore orientation change, so UI is horizontal                   
	 * <p>
	 * @return void
	 */
	@Override
	public void onConfigurationChanged(Configuration newConfig) {
		super.onConfigurationChanged(newConfig);
	}

	@Override
	public void onStart(){
		super.onStart();
	}

	/**
	 * Updates action frame with instructions - boxes and arrows                 
	 * <p>
	 * Iterates through list of instructions, and adds to action frame as appropriate.
	 * To be efficient, only redraws from specific position
	 * Above/below the line, backwards/forwards arrows.
	 * <p>
	 * @param int. The instruction to redraw from
	 * @return void
	 */

	@SuppressLint("NewApi")
	public void updateDisplay(int fromInstruction){
		
		//TODO - Have to redraw FROM the previous instruction

		RelativeLayout container = (RelativeLayout) findViewById(R.id.actionFrame);

		//Keep track of what instruction has been added
		int currentPosition = fromInstruction;

		List<Instruction> list = game.getInstructionList(fromInstruction); //From the edited point

		for(Instruction inst: list)
		{			
			if (inst instanceof Box)
			{
				Box instruction = (Box) inst;
				Button button = new Button(this);
				button.setBackgroundColor(registerColours[instruction.register]); //The colour of the register held in this instruction
				int instructionID = instruction.identity;  //BP in android is direct access
				button.setId(instructionID);

				//Have new layout for each button, as causes conflicts when not
				RelativeLayout.LayoutParams instructionParameters = new RelativeLayout.LayoutParams(RelativeLayout.LayoutParams.WRAP_CONTENT, RelativeLayout.LayoutParams.WRAP_CONTENT);
				
				//To give black border
				LinearLayout instructionContainer = new LinearLayout(this);
				LinearLayout.LayoutParams lp = new LinearLayout.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT, LinearLayout.LayoutParams.WRAP_CONTENT); 
				lp.setMargins(1, 1, 1, 1); 
				instructionContainer.setBackgroundColor(Color.BLACK);
				instructionContainer.setLayoutParams(lp);
				instructionContainer.setId(instructionID); //instruction container is same ID as button and instruction - treated as one object.
	
				
				if (instruction.getType()) //If Increment
				{
					instructionParameters.addRule(RelativeLayout.ALIGN_BOTTOM, R.id.theLine);	
				}

				else
				{
					instructionParameters.addRule(RelativeLayout.ALIGN_TOP, R.id.theLine);
				}

				if (currentPosition <= 0)
				{
					instructionParameters.addRule(RelativeLayout.ALIGN_PARENT_LEFT);			
				}

				else
				{
					instructionParameters.addRule(RelativeLayout.RIGHT_OF, currentPosition); //Right of the 
				}

				currentPosition = instructionID;
				button.setLayoutParams(lp);
				instructionContainer.addView(button);
				instructionContainer.setLayoutParams(instructionParameters);
				container.addView(instructionContainer);
			}
		}
	}

	/**
	 * Iterates through register buttons, getting their data from Game class.                   
	 * <p>
	 * @return void
	 */
	public void setRegisters(){

		for (int i = 0; i<game.MAXREGISTERS; i++){

			int resID = i;
			Button b = (Button) findViewById(resID);
			String data = game.getRegData(i) + "";
			b.setText(data);
		}
	}


	/**
	 * Takes click on register button and increments register                     
	 * <p>
	 * @param View. The button which has been clicked      
	 * @return void
	 */
	@Override
	public void onClick(View v) {

		int resid = v.getId();

		/*for (int check: registerNames)
		{
			if (resid == check){

			game.incrementReg(resid);
			}
		}*/

		if (resid == R.id.new_arrow_button || resid == R.id.new_box_button || resid == R.id.new_end_button)
		{
			int prevInstructionId = game.newInstruction(resid);
			this.updateDisplay(prevInstructionId);
		}

		else if(resid == R.id.run_button)
		{
			game.runGame();
		}

		else 
		{
			int prevInstructionId = game.updateInstruction(resid);
			this.updateDisplay(prevInstructionId);
		}
	}

	/**
	 * Takes long click on register button and zeros register                      
	 * <p>
	 * @param View. Button which has been clicked      
	 * @return boolean
	 */
	@Override
	public boolean onLongClick(View v) {

		int resid = v.getId();
		game.zeroReg(resid);
		return true;
	}
}