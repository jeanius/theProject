package com.jeanpower.reggieproject;

import java.io.File;
import java.util.ArrayList;
import java.util.List;

import android.annotation.SuppressLint;
import android.os.AsyncTask;
import android.os.Build;
import android.util.Log;
import android.view.View;

/**
 * Game Presenter
 * <p>
 * Deals with game logic, creating instructions, editing instructions, running game<br>
 * Controls access to Instructions for MainActivity, Tutorial<br>
 * Controls access to MainActivity for SaveLoad, RunGame<br>
 * <p>
 * @author Jean Power 2014
 */
public class Game{

	private Instruction first;
	private Instruction last;
	private Instruction lastBox; //Boxes are added beside the last box, not the last arrow/end
	private Instruction currPos;
	private int[] registers; //Register data
	private final MainActivity activity;
	private final int MAXREGISTERS = 10;
	private Instruction prevPos = null; //Previous instruction is highlighted on screen, as arrows are not always followed - allows for correct iteration to be highlighted.
	private int boxAbove; //ID of any box above the line, for Arrow layout
	private int boxBelow;
	private Game game = this;
	private final int DELAY = 700; //As instructions do work, highlighted on screen, with short delay.

	/**
	 * Constructor. 
	 * <p>
	 * Zeros all registers, instantiates instance variables.<br>
	 * @param ma - MainActivity 
	 */
	public Game(MainActivity ma) {
		activity = ma;
		first = null;
		last = null;
		registers = new int[MAXREGISTERS];

		for (int i = 0; i < MAXREGISTERS; i++) {
			registers[i] = 0;
		}
	}

	/**
	 * Checks if errors in program on screen and runs game
	 * <p>
	 * Uses anonymous inner class RunGame due to pauses in running game. UI should not freeze
	 * <p>
	 * @param void
	 * @return void
	 */
	public void runGame() {

		ErrorCheck ec = new ErrorCheck(this, activity);
		boolean canRun = ec.checkErrors();

		if (canRun){
			currPos = first;
			RunGame rungame = new RunGame();
			rungame.execute();
		}

		else {
			this.resetButton(); //Reset the run button back to "Run" if game cannot run
		}
	}

	/**
	 * Creates Instruction
	 * <p>
	 * Sets successor and predecessor of instruction.<br>
	 * Instruction type impacts on how it is placed in doubly linked list
	 * <p>
	 * @param resourceID - which icon was pressed
	 * @return Instruction - new instruction
	 */
	@SuppressLint("NewApi")	// Have dealt with different versions in code.
	public Instruction newInstruction(int resourceID) {

		Instruction instruction = null;

		switch (resourceID) {
		case R.id.new_arrow_button:
			instruction = new Arrow(this);
			break;
		case R.id.new_box_button:
			instruction = new Box(this);
			lastBox = instruction;
			break;
		case R.id.new_end_button:
			instruction = new End(this);
			break;
		}

		if (null == first) // Can only be a box.
		{
			first = instruction;
			last = instruction;
			instruction.setSucc(null);
		}

		else {
			if (instruction instanceof Box){ //No instruction before a box impacts box

				last.setSucc(instruction); //Box is always added as successor of last instruction.
				instruction.setPred(last);
				last = instruction;
			}
			else if (instruction instanceof Arrow){
				Arrow arrow = (Arrow) instruction;
				arrow.setTo(lastBox);

				//If last instruction is an Arrow, or Box, new arrow can be added as successor
				if (last instanceof Arrow || last instanceof Box){

					last.setSucc(instruction);
					instruction.setPred(last);
					last = instruction;
				}

				//But, new Arrows must always be added as predecessor of an End instructions
				else if (last instanceof End){

					Instruction endPred = last.getPred();

					while (endPred instanceof End){//In case of multiple end instructions
						endPred = endPred.getPred();
					}

					endPred.setSucc(instruction);
					instruction.setPred(endPred);
					last.setPred(instruction);
					instruction.setSucc(last);	
				}
			}

			//End instructions are added as successors of last also, unless End already present.
			else if (instruction instanceof End){

				if (last instanceof Arrow || last instanceof Box){ //If there is already an End, will not be added
					last.setSucc(instruction);
					instruction.setPred(last);
					last = instruction;
				}
			}
		}

		//Give instruction its unique ID.
		if (Build.VERSION.SDK_INT >= 17) {
			instruction.setId(View.generateViewId());
		}
		else {
			instruction.setId(Util.generateViewId());
		}

		return instruction;
	}

	/**
	 * Updates Box instruction to be associated with a new register. Updates End instruction to a new Box.
	 * <p>
	 * @param i - Instruction to be updated
	 * @return void
	 */
	public void updateInstruction(Instruction i) {

		if (i instanceof Box) {
			Box box = (Box) i;
			box.setRegister();
			activity.updateColour(box.getId(), box.getRegister());
		}
		else if (i instanceof End){

			Instruction prev = i.getPred();
			End end = (End) i;

			while (prev instanceof Arrow || prev instanceof End){

				prev = prev.getPred(); //Found currentBox end sits in
			}

			prev = prev.getPred(); //To find next previous box

			while (prev instanceof Arrow || prev instanceof End){

				prev = prev.getPred();
			}

			if (null == prev){
				this.deleteInstruction(end); //If it's already at the first Box, delete (arrow cannot be in first place)
			}

			else { //Move the End instruction back along the instruction list, to be associated with the previous Box.
				Box prevBox = (Box) prev;
				Instruction boxSucc = prevBox.getSucc();
				Instruction endPred = end.getPred();
				Instruction endSucc = end.getSucc();

				endPred.setSucc(endSucc);

				if (null != endSucc){

					endSucc.setPred(endPred); 
				}

				else { //If the End instruction was last, reset last to its predecessor.
					last = endPred;
				}

				//Arrow must always be reached before an End instruction
				if (boxSucc instanceof Arrow){					

					Instruction arrowSucc = boxSucc.getSucc();
					Instruction arrowPred = boxSucc;

					while (arrowSucc instanceof Arrow){
						arrowPred = arrowSucc;
						arrowSucc = arrowSucc.getSucc();
					}

					arrowPred.setSucc(end);
					end.setSucc(arrowSucc); //End moves between arrow and arrow succ, not between box and arrow
					end.setPred(arrowPred);

					if (null != arrowSucc)
					{
						arrowSucc.setPred(end);
					}
				}
				else {//Else end moves between two instructions

					prevBox.setSucc(end);
					end.setSucc(boxSucc); 
					end.setPred(prevBox);

					if (null != boxSucc){
						boxSucc.setPred(end);
					}
				}
			}
		}
	}

	/**
	 * Assesses if the head of the arrow can move
	 * <p>
	 * To prevent issues with an Arrow having predecessors which are incorrect in relation to its goto, 
	 * this method reviews if the goto is the same as the predecessor, or before (if loop), or after (if branch).<br>
	 * These are acceptable scenarios.
	 * <p>
	 * @param from - Arrow that is checked
	 * @param to - ID of "To" box that head should point to.
	 * @return boolean - is allowed.
	 */
	public boolean headMove(Arrow from, int to) {

		boolean move = false;
		Instruction currentPosition = from;

		while (null != currentPosition && !move) {

			if (currentPosition.getId() == to) { // Allows for pred/goto to be the same
				move = true;
			}
			else {

				if (from.getType()){
					currentPosition = currentPosition.getPred();
				}

				else 
				{
					currentPosition = currentPosition.getSucc();
				}
			}
		}
		return move;
	}

	/**
	 * Arrow head is dropped into a box, the "To" of the arrow updated, after it is checked the move is acceptable.
	 * 
	 * @param arrow - Arrow that has head being moved 
	 * @param move - Box head should move to
	 */
	public void updateHead(Arrow arrow, Box move) {

		if (move.getId() == arrow.getTo().getId()){
			activity.showMessage(activity.getString(R.string.already)); //Error check for already pointing 
		}

		else if (!arrow.getType() && arrow.getPred().getId() == move.getId()){
			activity.showMessage(activity.getString(R.string.error3)); //Error check for trying to make branch to itself
		}

		else {
			boolean canMove = this.headMove(arrow, move.getId()); //Check if move is acceptable

			if (canMove) {
				arrow.setTo(move);
				arrow.calculateSpaces();
			}
		}
	}

	/**
	 * Assesses if the tail of the arrow can move
	 * <p>
	 * To prevent issues with an Arrow having predecessors which are incorrect in relation to its goto, 
	 * this method reviews if the predecessor is the same as the goto, or after (if loop), or before (if branch).<br>
	 * These are acceptable scenarios.
	 * <p>
	 * @param from - Arrow that is checked
	 * @param pred - ID of "pred" box that tail should point to.
	 * @return boolean - is allowed.
	 */
	public boolean tailMove(Arrow from, int pred) {

		boolean move = false;
		Instruction currentPosition = from.getTo();

		while (null != currentPosition && !move) {

			if (currentPosition.getId() == pred) { // Allows for pred/goto to be the same
				move = true;
			}
			else {

				if (from.getType()){
					currentPosition = currentPosition.getSucc();
				}
				else 
				{
					currentPosition = currentPosition.getPred();
				}
			}
		}
		return move;
	}

	/**
	 * Arrow tail is dropped into a box, "pred" is updated, after it is checked the move is acceptable.
	 * <p>
	 * Many scenarios for update, as Branch arrows must come before loops, all Arrows must come before Ends
	 * <p>
	 * @param arrow - Arrow that has head being moved 
	 * @param move - Box head should move to
	 */
	public void updateTail(Arrow arrow, Box move) {

		if (move.getId() == arrow.getPred().getId()){
			activity.showMessage(activity.getString(R.string.coming)); //Error check for already coming from
		}

		else if (!arrow.getType() && arrow.getTo().getId() == move.getId()){
			activity.showMessage(activity.getString(R.string.error3)); //Error check for trying to make branch to itself
		}

		else {	
			boolean canMove = this.tailMove(arrow, move.getId()); //Check if move is acceptable.

			if (canMove) {

				Instruction arrowPred = arrow.getPred();
				Instruction arrowSucc = arrow.getSucc();
				Instruction boxSucc = move.getSucc();

				arrowPred.setSucc(arrowSucc);

				if (null != arrowSucc) {
					arrowSucc.setPred(arrowPred);
				}

				else {
					last = arrowPred;
				}

				arrow.setPred(move);
				move.setSucc(arrow);
				arrow.setSucc(boxSucc);

				if (null != boxSucc){
					boxSucc.setPred(arrow);
				}

				//If ends up with Loop in front of a branch, re-sort with Branch in front of loop
				if (arrow.getSucc() instanceof Arrow){

					Arrow newSucc = (Arrow) arrow.getSucc();

					if (!newSucc.getType() && arrow.getType()){

						Instruction newPred = arrow.getPred();
						Instruction succOfSucc = newSucc.getSucc();

						arrow.setSucc(succOfSucc);

						if (null != succOfSucc){
							succOfSucc.setPred(arrow);
						}

						newPred.setSucc(newSucc);
						newSucc.setSucc(arrow);
						newSucc.setPred(newPred);
						arrow.setPred(newSucc);
					}
				}

				if (null == arrow.getSucc()){ //Reset last, if arrow was last.
					last = arrow;
				}
				arrow.calculateSpaces();
			}
		}
	}

	/**
	 * Changes Box instruction to inc or dec. Changes Arrow instruction to loop or branch.
	 * <p>
	 * @param i - Instruction to be updated
	 * @return void
	 */
	public void changeInstruction(Instruction i) {

		if (i instanceof Box) {
			Box box = (Box) i;
			box.setType();
		}

		else if (i instanceof Arrow) {

			Arrow arrow = (Arrow) i;
			Instruction pred = arrow.getPred();
			Instruction succ = arrow.getSucc();
			Instruction goTo = arrow.getTo();
			Instruction goToSucc = goTo.getSucc();

			arrow.setType();

			if (pred.getId() != goTo.getId()){

				arrow.setPred(goTo);
				goTo.setSucc(arrow);
				arrow.setSucc(goToSucc);
				pred.setSucc(succ);

				if (null != goToSucc) {

					goToSucc.setPred(arrow);
				}

				if (null != succ) {

					succ.setPred(pred);
				}

				else {
					last = pred;
				}
			}

			//If ends up with Loop in front of a branch, re-sort with Branch in front of loop
			if (arrow.getSucc() instanceof Arrow){

				Arrow newSucc = (Arrow) arrow.getSucc();

				if (!newSucc.getType() && arrow.getType()){

					Instruction newPred = arrow.getPred();
					Instruction succOfSucc = newSucc.getSucc();

					arrow.setSucc(succOfSucc);

					if (null != succOfSucc){
						succOfSucc.setPred(arrow);
					}

					newPred.setSucc(newSucc);
					newSucc.setSucc(arrow);
					newSucc.setPred(newPred);
					arrow.setPred(newSucc);
				}
			}

			if (null == arrow.getSucc()){
				last = arrow;
			}

			arrow.calculateSpaces();
		}
	}

	/**
	 * Deletes an instruction
	 * <p>
	 * If box, deletes all arrows/ends associated with it.
	 * Else, just deletes the instruction, resetting pred/succ/last/first as appropriate.
	 *
	 * @param inst - Instruction to be deleted
	 * @return void
	 */
	public void deleteInstruction(Instruction inst){
		List<Instruction> instructionList = this.getInstructionList();
		int countBox = 0;
		int instructionID = inst.getId();
		Instruction succ = inst.getSucc();
		Instruction pred = inst.getPred();

		for (Instruction i: instructionList){

			if (i instanceof Box){ //Find how many boxes are on screen.
				countBox ++;
			}

			if (i instanceof Arrow){
				Arrow arrow = (Arrow) i;

				if (arrow.getTo().getId() == inst.getId()){ //If an arrow is pointing at a deleted instruction, reset.
					arrow.setTo(arrow.getPred());
				}
			}
		}

		if (countBox == 1 && inst instanceof Box){ //If this is the last box on screen, clear screen
			this.clearAll();
		}

		else {
			if (inst instanceof Box){

				if (inst.getId() == lastBox.getId()){

					Instruction previousBox = inst.getPred();

					while (previousBox instanceof Arrow || previousBox instanceof End){
						previousBox = previousBox.getPred();
					}

					lastBox = (Box) previousBox; //Reset last box, if the last box is deleted
				}

				while (succ instanceof Arrow || succ instanceof End){
					activity.removeInstruction(succ.getId()); //Remove any arrows/ends associated with box.

					if (null != pred){

						succ = succ.getSucc();
						pred.setSucc(succ);

					}
					else {

						succ.setPred(null);
						succ = succ.getSucc();
					}
				}
			}

			//Delete the instruction itself by resetting succ/pred.
			if (null != succ){
				succ.setPred(pred);
			}

			else {
				last = pred;			
			}

			if (null != pred){
				pred.setSucc(succ);

			}
			else {
				first = succ;
			}

			activity.removeInstruction(instructionID);
		}
	}

	/**
	 * Resets the on screen "Run" button
	 * <p>
	 * Controls access to MainActivity.
	 * @param void
	 * @return void
	 */
	public void resetButton(){
		activity.resetRunButton();
	}

	/**
	 * When user clicks on Save/Load, checks there are no errors, then starts the SaveLoad activity
	 * @param void
	 * @return void
	 */
	public void saveLoadClick(){

		ErrorCheck ec = new ErrorCheck(this, activity);
		boolean canRun = ec.checkErrors();

		if (canRun){
			SaveLoad sl = new SaveLoad(activity, this);
			sl.saveLoad();
		}
	}

	/**
	 * Allows reading in of file created during tutorial, as no dialog needed
	 * @param file - File to be read in
	 * @return void
	 */
	public void readInFile(File file){

		SaveLoad sl = new SaveLoad(activity, game);
		sl.readFile(file);	
	}

	/**
	 * Wipes Game data and resets registers to zero
	 * <p>
	 * @param void
	 * @return void
	 */
	public void clearAll(){
		first = null;
		last = null;
		lastBox = null;
		currPos = null;
		prevPos = null;

		for (int i = 0; i<MAXREGISTERS; i++){
			this.zeroReg(i);
		}
		activity.clearScreen();
	}

	/**
	 * Clears the activity screen
	 * <p>
	 * Controls access to MainActivity.
	 * @param void
	 * @return void
	 */
	public void clearActivityScreen(){

		activity.clearScreen();
		activity.updateDisplay();
	}

	/**
	 * Increments data held in specific register
	 * <p>
	 * @param registerNum - Index/number of register.
	 * @return void
	 */
	public void incrementReg(int registerNum) {

		if (registerNum >= 0 && registerNum < MAXREGISTERS){
			int newNum = registers[registerNum] + 1;
			registers[registerNum] = newNum;
		}
	}

	/**
	 * Decrements data held in specific register
	 * <p>
	 * Decrements and returns boolean as to if it was possible
	 * @param registerNum - Index/number of register.
	 * @return boolean - decrement completed.
	 */
	public boolean decrementReg(int registerNum) {

		if (registerNum >= 0 && registerNum < MAXREGISTERS){
			if (registers[registerNum] >=1){
				int newNum = registers[registerNum] - 1;
				registers[registerNum] = newNum;
				return true;
			}
			else {
				return false;
			}
		}
		return false;
	}

	/**
	 * Zeros a specific register
	 * <p>
	 * @param registerNum - Index/number of register.
	 * @return void
	 */
	public void zeroReg(int registerNum) {

		registers[registerNum] = 0;
	}

	/**
	 * Helper method for RunGame to access MainActivity
	 * <p>
	 * Controls access to MainActivity
	 * Callled twice for each instruction - first to highlight, then to de-highlight.
	 * @param void
	 * @param void
	 */
	private void updateActivityDisplay(){

		if (prevPos instanceof Box){
			activity.updateInstructionDisplay(prevPos.getId(), prevPos.getRegister()); //Highlights the instruction and the affected register
		}
		else if (prevPos instanceof Arrow){
			activity.updateInstructionDisplay(prevPos.getId(), -1);//Arrow does not have associated register, just highlights arrow.
		}
	}

	/**
	 * Inner class RunGame, as highlight on screen and then de-highlight needs to be delayed.
	 * To prevent screen from freezing, AsyncTask completes delay in background
	 * Interacts with Game, and the Instructions
	 * @author Jean
	 *
	 */
	private class RunGame extends AsyncTask<Void, Void, Void>{

		/**
		 * Actions completed on background thread, stopping UI from freezing
		 * 
		 *  @param params - void
		 *  @return void
		 */
		@Override
		protected Void doInBackground(Void... params) {

			while (null != currPos){

				if (currPos instanceof Box){

					prevPos = currPos; //Capture which instruction is working
					currPos.doWork(); 

					game.updateActivityDisplay(); //Will update display highlighting the instruction that did the work

					try {
						Thread.sleep(DELAY);
						game.updateActivityDisplay(); //Dehighlight
						Thread.sleep(DELAY);
					}
					catch (Exception e){
						Log.d("This was interrupted", "interrupted");
					}	
				}

				else if (currPos instanceof Arrow){

					Arrow currArrow = (Arrow) currPos;

					prevPos = currPos;
					currPos.doWork();

					//If arrow, highlight depends on what action is taken - if arrow followed, arrow is highlighted. If not, next instruction is.
					boolean setSucc = currArrow.getIfSet();

					if (currArrow.getType() && !setSucc || !currArrow.getType() && !setSucc){
						game.updateActivityDisplay(); 

						try {
							Thread.sleep(DELAY);
							game.updateActivityDisplay();
							Thread.sleep(DELAY);
						}
						catch (Exception e){
							Log.d("This was interrupted", "interrupted");
						}
					}
				}

				else {
					currPos.doWork();
				}
			}
			game.resetButton();
			return null;
		}
	}
	/**
	 * Sends a message to MainActivity to display
	 * <p>
	 * Controls access to MainActivity
	 * @param message - String to be displayed
	 * @return void
	 */
	public void showActivityMessage(String message){
		activity.showMessage(message);
	}

	/**
	 * Iterate through the instruction list, and set boxAbove as any increment ID, and boxBelow as any decrement ID
	 * <p>
	 * Used for placement of arrows
	 * @param void
	 * @return void
	 */
	public void setAboveBelow(){

		Instruction curr = first;

		boxAbove = -1;
		boxBelow = -1;
		boolean doneAbove = false;
		boolean doneBelow = false;

		while (null != curr && (!doneAbove || !doneBelow)){

			if (curr instanceof Box) {

				Box b = (Box) curr;

				if (b.getType()) {
					boxAbove = b.getId();
					doneAbove = true;
				}

				else if (!b.getType()) {
					boxBelow = b.getId();
					doneBelow = true;
				}
			}
			curr = curr.getSucc();
		}
	}

	//Getters, Setters

	/**
	 * Get the ID of any Arrow for Tutorial to highlight
	 * @param void
	 * @return int - Arrow ID
	 */
	public int findArrow(){

		ArrayList<Instruction> instructions = getInstructionList();

		int arrowId = -1;

		for(Instruction i: instructions){

			if (i instanceof Arrow){
				arrowId = i.getId();
			}
		}
		return arrowId;
	}

	/**
	 * Get the ID of any Box for Tutorial to highlight
	 * @param void
	 * @return int - Box ID
	 */
	public int findBox(){

		ArrayList<Instruction> instructions = getInstructionList();

		int boxId = -1;

		for(Instruction i: instructions){

			if (i instanceof Box){
				boxId = i.getId();
			}
		}
		return boxId;
	}

	/**
	 * Sets current position within running game
	 * <p>
	 * @param newPos - New Instruction 
	 * @return void
	 */
	public void setCurrPos(Instruction newPos) {
		currPos = newPos;
	}

	/**
	 * Returns data held in specific register
	 * <p>
	 * @param registerNum - Index/number of register.
	 * @return int - data in register
	 */
	public int getRegData(int registerNum) {
		return registers[registerNum];
	}

	/**
	 * Returns the constant of maximum registers
	 * <p>
	 * @param void
	 * @return int - number of maximum registers
	 */
	public int getMaxReg() {
		return MAXREGISTERS;
	}

	/**
	 * Returns the previous instruction 
	 * <p>
	 * @param void
	 * @return Instruction - previous instruction
	 */
	public Instruction getPrevPos(){
		return prevPos;
	}

	/**
	 * Set the first instruction in the list
	 * @param f - new first instruction
	 * @return void
	 */
	public void setFirst(Instruction f){
		first = f;
	}

	/**
	 * Set the last instruction in the list
	 * @param l - new last instruction
	 * @return void
	 */
	public void setLast(Instruction l){
		last = l;
	}

	/**
	 * Get the first instruction ID in the list
	 * @param void
	 * @return int ID of first instruction
	 */
	public int getFirst(){

		if (null != first){
			return first.getId();
		}
		else { 
			return -1;
		}
	}

	/**
	 * Get the last instruction ID in the list
	 * @param void
	 * @return int ID of last instruction
	 */
	public int getLast(){

		if (null != last){
			return last.getId();
		}
		else{
			return -1;
		}
	}

	/**
	 * Get the last instruction ID in the list
	 * @param void
	 * @return int ID of last instruction
	 */
	public int getLastBox(){

		if (null != lastBox){
			return lastBox.getId();
		}
		else{
			return -1;
		}
	}

	/**
	 * Get the first instruction in the list
	 * @param void
	 * @return Instruction - first instruction
	 */
	public Instruction getFirstIns(){
		return first;
	}

	/**
	 * Get the last instruction in the list
	 * @param void
	 * @return Instruction - last instruction
	 */
	public Instruction getLastIns(){
		return last;
	}

	/**
	 * Set the last box in the list
	 * @param lb - new last box
	 * @return void
	 */
	public void setLastBox(Instruction lb){
		lastBox = lb;
	}

	/**
	 * Get ID of any Box above the line
	 * @param void
	 * @return int - ID of any increment
	 */
	public int getAbove(){
		return boxAbove;
	}

	/**
	 * Get ID of any Box below the line
	 * @param void
	 * @return int - ID of any decrement
	 */
	public int getBelow(){
		return boxBelow;
	}

	/**
	 * Iterates through linked list of instructions, adds to list, returns list of
	 * instructions
	 * <p>
	 * @param void
	 * @return ArrayList<Instruction> - list of instructions
	 */
	public ArrayList<Instruction> getInstructionList() {

		ArrayList<Instruction> instructionList = new ArrayList<Instruction>();

		Instruction currentPosition = first;

		while (null != currentPosition) {

			instructionList.add(currentPosition);
			currentPosition = currentPosition.getSucc();
		}
		return instructionList;
	}

	/**
	 * Iterates through linked list of instructions from a certain point to a certain point, returns list of
	 * instructions between these
	 * <p>
	 * @param void
	 * @return ArrayList<Instruction> - list of instructions
	 */
	public List<Instruction> getToFrom(Instruction from, int to) {

		List<Instruction> instructionList = new ArrayList<Instruction>();
		Instruction current = from;
		int target = to;
		boolean done = false;

		while (null != current && !done) {

			instructionList.add(current);

			if (current.getId() == target) {
				done = true;
			}
			else {

				current = current.getSucc();
			}
		}
		return instructionList;
	}

	/**
	 * Get instruction with ID
	 * @param ID - instruction being searched for
	 * @return Instruction - if found or null
	 */
	public Instruction getInstruction(int ID) {

		Instruction currentPosition = first;
		int targetInstruction = ID;
		boolean found = false;

		while (null != currentPosition && !found) {

			if (targetInstruction == currentPosition.getId()) {
				found = true;
			}

			else {
				currentPosition = currentPosition.getSucc();
			}
		}
		return currentPosition;
	}

	/**
	 * Iterates through linked list of instructions, adds to list, returns list of
	 * instruction IDs
	 * <p>
	 * @param void
	 * @return ArrayList<Instruction> - list of instruction IDs
	 */
	public ArrayList<Integer> getInstructionIDs() {

		ArrayList<Integer> instructionIDs = new ArrayList<Integer>();

		Instruction currentPosition = first;

		while (null != currentPosition) {

			instructionIDs.add(currentPosition.getId());
			currentPosition = currentPosition.getSucc();
		}
		return instructionIDs;
	}

	/**
	 * Get the currentPosition
	 * @param void
	 * @return Instruction - currentPosition
	 */
	public Instruction getCurrPos(){
		return currPos;
	}
}