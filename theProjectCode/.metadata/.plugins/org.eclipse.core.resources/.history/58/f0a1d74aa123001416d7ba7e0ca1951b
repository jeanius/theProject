package com.jeanpower.reggieproject;

/**
 * Arrow model object
 * <p>
 * 
 * An arrow corresponds to either an increment or decrement/branch instruction.<p>
 * Holds attributes to relating to identity and position of Arrow within the doubly linked list <p>
 * of instructions, type of Arrow, where arrow is pointing, number of instructions arrow spans and<p>
 * action of Arrow when it is doing work.
 * <p>
 * Implements instruction interface.
 * <p>
 * Note: Does not hold drawing information, as this is controlled by MainActivity.
 * <p>
 * @author Jean Power 2014
 * 
 */

public class Arrow implements Instruction{

	private Instruction toInstruction;
	private Instruction pred;
	private Instruction succ;
	private Game caller;
	private int register;
	private int identity;
	private boolean loop;
	private int spaces; //Corresponds to number of instructions between pred and to, allowing for correct length
	private boolean setSucc; //For indicating if arrow should be highlighted on screen (not always followed)

	/**
	 * Constructor.
	 * 
	 * @param Game - calling class.
	 */
	public Arrow(Game g){

		caller = g;
		succ = null;
		pred = null;
		loop = true;
		spaces = 1;
	}

	/**
	 * Completes work of Arrow instruction
	 * <p>
	 * If loop:<p>
	 * - If predecessor is decrement/branch box, and decrement was possible, loop is followed. <p>
	 * - If predecessor is increment, loop is followed. <p>
	 * - Else, currPos is set to successor. Loop is skipped, if program tried to decrement past zero.<p>
	 * 
	 * If branch:<p>
	 * - If predecessor is decrement/branch box, and decrement was not possible, branch is followed. <p>
	 * - If predecessor is increment, currPos is set to successor.<p>
	 * - Else, currPos is set to null. There has been an issue with program building.<p>
	 * - 
	 * <p>
	 * @param void
	 * @return void
	 */
	@Override
	public void doWork() {

		setSucc = false;

		if (loop)
		{
			if (pred instanceof Box){
				Box box = (Box) pred;

				if (!box.getType() && !box.decDone()){

					caller.setCurrPos(succ);
					setSucc = true;
				}
				else {
					caller.setCurrPos(toInstruction);
				}
			}

			else {
				caller.setCurrPos(toInstruction);
			}
		}

		else
		{
			if (pred instanceof Box){

				Box box = (Box) pred;

				if (!box.decDone()){
					caller.setCurrPos(toInstruction);
				}

				else
				{
					caller.setCurrPos(succ);
					setSucc = true;
				}
			}

			else {
				caller.setCurrPos(null); //Branches come before loops and ends, so issue if not.
			}
		}
	}

	/**
	 * Calculates span of arrow
	 * <p>
	 * Iterates through the list of instructions, adding 1 for each Box encountered.
	 * <p>
	 * @param void
	 * @return void
	 */
	public void calculateSpaces(){

		int count = 1; 
		Instruction currPos;

		if (loop){ // Loop must iterates through predecessors of own predecessor, until reaches "To Instruction"

			currPos = pred;

			while (currPos != null && currPos.getId() != toInstruction.getId()){


				if (currPos instanceof Box) {
					count ++;
				}

				currPos = currPos.getPred();
			}
		}

		else {//Branch must iterates through successors of own predecessor, until reaches "To Instruction"

			if (pred.getId() != toInstruction.getId()){

				currPos = pred;

				while (currPos != null && currPos.getId() != toInstruction.getId()){
					currPos = currPos.getSucc();

					if (currPos instanceof Box) {
						count ++;
					}
				}
			}
		}

		spaces = count;
	}


	//Getters/Setters

	/** Set successor of this instruction
	 * @param Instruction - new successor
	 * @return void 
	 */
	@Override
	public void setSucc(Instruction successor) {
		succ = successor;
	}

	/** Return successor of this instruction
	 * @param void
	 * @return Instruction - successor 
	 */
	@Override
	public Instruction getSucc() {

		return succ;
	}

	/** Set predecessor of this instruction and associated register
	 * @param Instruction - new predecessor
	 * @return void 
	 */
	@Override
	public void setPred(Instruction predecessor) {
		pred = predecessor;

		if (pred != null){
			register = pred.getRegister();
		}
	}

	/** Return predecessor of this instruction
	 * @param void
	 * @return Instruction - predecessor
	 */
	@Override
	public Instruction getPred() {
		return pred;

	}

	/** Return type of arrow - true loop, false branch
	 * @param void
	 * @return boolean 
	 */
	public boolean getType(){
		return loop;
	}

	/** Switch type of arrow - true loop, false branch
	 * @param void
	 * @return void
	 */
	public void setType(){

		if (loop)
		{
			loop = false;
		}

		else 
		{
			loop = true;
		}
	}

	/** Return spaces - span of arrow
	 * @param void
	 * @return int - number of Boxes spanned
	 */
	public int getSpaces(){
		return spaces;
	}

	/** Return register for this instruction
	 * <p>
	 * @param void
	 * @return int - register number
	 */
	@Override
	public int getRegister() {
		return register;
	}

	/** Set ID of this instruction
	 * <p>
	 * ID is unique to this Arrow, and connects onscreen view with Arrow<p>
	 * <p>
	 * @param int - ID
	 * @return void 
	 */
	@Override
	public void setId(int ID) {
		identity = ID;
	}

	/** Return ID for this instruction
	 * @param void
	 * @return int - register number
	 */
	@Override
	public int getId() {
		return identity;
	}

	/** Set "To" for this arrow that it is pointing at
	 * @param Instruction - new toInstruction
	 * @return void 
	 */
	public void setTo(Instruction to){
		toInstruction = to;
	}

	/** Return "To" instruction for this arrow
	 * @param void
	 * @return Instruction - to instruction
	 */
	public Instruction getTo(){
		return toInstruction;
	}

	/** Return if this arrow has set to its successor 
	 * @param void
	 * @return boolean - if set to successor
	 */
	public boolean getIfSet(){
		return setSucc;
	}
}