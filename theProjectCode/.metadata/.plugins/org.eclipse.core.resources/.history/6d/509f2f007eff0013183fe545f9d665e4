//View - handles UI components and events

package com.jeanpower.reggieproject;

import java.util.List;

import android.os.Bundle;
import android.annotation.SuppressLint;
import android.app.Activity;
import android.content.ClipData;
import android.content.res.Configuration;
import android.content.res.Resources;
import android.content.res.TypedArray;
import android.graphics.Bitmap;
import android.graphics.Color;
import android.util.Log;
import android.util.TypedValue;
import android.view.DragEvent;
import android.view.Menu;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.DragShadowBuilder;
import android.widget.Button;
import android.widget.ImageButton;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;

public class MainActivity extends Activity implements View.OnClickListener, View.OnLongClickListener, View.OnTouchListener, View.OnDragListener{

	private Game game;
	private int[] registerColours;
	private int[] registerIds;
	private TypedArray instructionIcons;
	private Button arrowButton;
	private Button endButton;
	private Button runButton;
	private boolean oneBox;
	private double theLineY;
	private int maxRegisters; //Duplication, but constant get is inefficient
	private double origX = 0; //For box movements
	private double origY = 0;
	private boolean clicked;
	private int buttonWidth; //For arrow sizes, set when window gets focus
	private int buttonHeight;
	private double arrowX; //For arrow movements
	private double arrowY;
	private boolean arrowHead; //
	private Arrow currentlyDragging; //

	/**
	 * Called when application is opened.                  
	 * <p>
	 * Sets the view to first screen, adds register buttons
	 * Adds listeners to activity buttons
	 * <p>
	 * @return void
	 */
	@SuppressLint("NewApi")
	@Override
	protected void onCreate(Bundle savedInstanceState) {

		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main); 
		game = new Game(this);
		instructionIcons = getResources().obtainTypedArray(R.array.instruction_icons);
		oneBox = false; //To track if user has added a Box instruction, preventing arrow/run/end being called
		maxRegisters = game.getMaxReg();

		//Array of colours, from color.xml
		registerColours = getResources().getIntArray(R.array.rainbow);

		String[]registerNames = getResources().getStringArray(R.array.register_names);	
		registerIds = new int[maxRegisters];	

		for (int i = 0; i<maxRegisters; i++){

			int resID = getResources().getIdentifier(registerNames[i] , "string", getPackageName());
			registerIds[i] = resID;
		}

		LinearLayout container = (LinearLayout) findViewById(R.id.register_frame);
		LinearLayout.LayoutParams regParams = new LinearLayout.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT, LinearLayout.LayoutParams.WRAP_CONTENT); 

		//To give black border
		regParams.setMargins(1, 1, 1, 1); 
		container.setBackgroundColor(Color.BLACK);

		for (int i = 0; i<maxRegisters; i++){

			Button button = (Button) findViewById(registerIds[i]);
			button.setText(game.getRegData(i) + ""); //Set initial text to 0			
			button.setLayoutParams(regParams); //For wrap content	

			button.setBackgroundColor(registerColours[i]);	

			button.setOnClickListener(this);
			button.setOnLongClickListener(this);
		}

		//Add listeners to activity buttons. //TODO Is there a better way to do this?
		arrowButton = (Button) findViewById(R.id.new_arrow_button);
		arrowButton.setOnClickListener(this);	
		arrowButton.setClickable(false);

		runButton = (Button) findViewById(R.id.run_button);
		runButton.setOnClickListener(this);
		runButton.setClickable(false);

		Button boxButton = (Button) findViewById(R.id.new_box_button);
		boxButton.setOnClickListener(this);

		endButton = (Button) findViewById(R.id.new_end_button);
		endButton.setOnClickListener(this);
		endButton.setClickable(false);
	}

	/**
	 * Inflates the menu and adds items                 
	 * <p>
	 * @param Menu. Menu which has items added
	 * @return boolean
	 */
	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.

		getMenuInflater().inflate(R.menu.main, menu);
		return true;
	}

	/**
	 * To ignore orientation change, so UI is horizontal                   
	 * <p>
	 * @return void
	 */
	@Override
	public void onConfigurationChanged(Configuration newConfig) {
		super.onConfigurationChanged(newConfig);
	}

	@Override
	public void onStart(){
		super.onStart();
	}

	/**
	 * Updates action frame with instructions - boxes and arrows                 
	 * <p>
	 * Iterates through list of instructions, and adds to action frame as appropriate.
	 * To be efficient, only redraws from specific position
	 * Above/below the line, backwards/forwards arrows.
	 * <p>
	 * @param int. The instruction to redraw from
	 * @return void
	 */

	@SuppressLint("NewApi")
	public void updateDisplay(Instruction i){

		RelativeLayout container = (RelativeLayout) findViewById(R.id.actionFrame);

		//Keep track of what instruction has been added
		Instruction currentInstruction = i;
		int previousInstructionID = 0;
		
		if (currentInstruction.getPred() != null){
			previousInstructionID = currentInstruction.getPred().getId();
		}
		
		List<Instruction> list = game.getInstructionList(previousInstructionID); //From the edited point
		List<Instruction> allInstructions = game.getInstructionList(game.getFirst().getId());

		for(Instruction inst: list)
		{			
			if (inst instanceof Box)
			{
				Box box = (Box) inst; //Box to be added
				Box prevInstruction = null;
				ImageButton button = new ImageButton(this);
				button.setBackgroundColor(Color.BLACK);
				button.setImageResource(instructionIcons.getResourceId(box.getRegister(), -1));
				int instructionID = box.getId();				

				View v = findViewById(instructionID); //If already there, remove to allow redraw
				container.removeView(v);

				button.setId(instructionID); //Connecting onscreen button with instruction

				//TODO - Could instruction extend Button?

				//Have new layout for each button, as causes conflicts when not
				RelativeLayout.LayoutParams instructionParameters = new RelativeLayout.LayoutParams(RelativeLayout.LayoutParams.WRAP_CONTENT, RelativeLayout.LayoutParams.WRAP_CONTENT);

				if (box.getType()) //If Increment
				{
					instructionParameters.addRule(RelativeLayout.ALIGN_BOTTOM, R.id.theLine);	
				}

				else
				{
					instructionParameters.addRule(RelativeLayout.ALIGN_TOP, R.id.theLine);
				}


				if (previousInstructionID <= 0)
				{
					instructionParameters.addRule(RelativeLayout.ALIGN_PARENT_LEFT);
				}

				else
				{
					Instruction checking = box.getPred();

					//To add next to previous box
					while (checking instanceof Arrow){

						checking = checking.getPred();
					}

					//If previous instruction is also a box, remove the connecting arrow, to allow refresh
					if (box.getPred() instanceof Box)
					{
						prevInstruction = (Box) box.getPred();
						container.removeView(prevInstruction.getConnect());
					}

					instructionParameters.addRule(RelativeLayout.RIGHT_OF, checking.getId()); //Right of the current instruction
				}

				//Redraw the line
				RelativeLayout.LayoutParams params = new RelativeLayout.LayoutParams(RelativeLayout.LayoutParams.WRAP_CONTENT, RelativeLayout.LayoutParams.WRAP_CONTENT);
				params.addRule(RelativeLayout.CENTER_IN_PARENT, RelativeLayout.TRUE);
				Resources r = getResources();
				float px = TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 2, r.getDisplayMetrics());
				params.width = container.getWidth();
				params.height = (int) px;
				View line = findViewById(R.id.theLine);
				line.setLayoutParams(params);

				previousInstructionID = instructionID;
				button.setLayoutParams(instructionParameters);
				button.setOnTouchListener(this);
				button.setOnDragListener(this);
				container.addView(button);

				if (null != prevInstruction){

					ConnectLine connLine = new ConnectLine(this, findViewById(box.getPred().getId()), findViewById(previousInstructionID), container);
					container.addView(connLine);	
					prevInstruction.setConnect(connLine);
				}
			}

			else if (inst instanceof Arrow)
			{	
				Arrow arrow = (Arrow) inst;
				int instructionID = arrow.getId();

				View v = findViewById(instructionID); //If already there, remove to allow redraw
				container.removeView(v);

				ImageButton arrowButton = new ImageButton(this);
				
				arrowButton.setId(instructionID);
				
				arrowButton.setBackgroundColor(Color.TRANSPARENT);
				DrawArrow drawArrow = new DrawArrow(arrow, buttonWidth, buttonHeight);
				drawArrow.setColours(registerColours[arrow.getPred().getRegister()], registerColours[arrow.getTo().getRegister()]);

				Bitmap arrowPicture = drawArrow.getImage();
				arrowButton.setImageBitmap(arrowPicture);

				RelativeLayout.LayoutParams arrowParams = new RelativeLayout.LayoutParams(RelativeLayout.LayoutParams.WRAP_CONTENT, RelativeLayout.LayoutParams.WRAP_CONTENT);

				List<Instruction> instructionBetween = null;
				int numArrow = 0;


				if (arrow.getType()){

					instructionBetween = game.getToFrom(arrow.getTo(), arrow.getPred().getId());

					for (Instruction ins : allInstructions){

						if (ins instanceof Arrow && arrow.getType()){

							Arrow check = (Arrow) ins;

							List<Instruction> instructionList = game.getToFrom(check.getTo(), check.getPred().getId());
							int sizeList = instructionList.size();

							instructionList.removeAll(instructionBetween);

							int newSizeList = instructionList.size();

							if (sizeList != newSizeList){
								numArrow ++;
							}
						}
					}	
				}

				else
				{
					instructionBetween = game.getToFrom(arrow.getSucc(), arrow.getTo().getId());

					for (Instruction ins : allInstructions){

						if (ins instanceof Arrow && !arrow.getType()){

							Arrow check = (Arrow) ins;

							List<Instruction> instructionList = game.getToFrom(arrow.getSucc(), arrow.getTo().getId());
							int sizeList = instructionList.size();

							instructionList.removeAll(instructionBetween);

							int newSizeList = instructionList.size();

							if (sizeList != newSizeList){
								numArrow ++;
							}
						}
					}	
				}

				Instruction checking = arrow.getPred();

				//To add next to previous box
				while (checking instanceof Arrow){

					checking = checking.getPred();
				}
				
				if (arrow.getType()){
					arrowParams.addRule(RelativeLayout.ALIGN_RIGHT, checking.getId());
				}
				
				else{
					
					arrowParams.addRule(RelativeLayout.ALIGN_LEFT, checking.getId());
				}
				
				
				arrowButton.setLayoutParams(arrowParams);
				//currentPosition = instructionID;
				arrowButton.setOnLongClickListener(this);
				arrowButton.setOnDragListener(this);
				container.addView(arrowButton);
			}

			else if (inst instanceof End)
			{
				//TODO - End
			}
		}	
	}

	@Override
	public void onWindowFocusChanged(boolean hasFocus) {
		super.onWindowFocusChanged(hasFocus);

		buttonWidth = arrowButton.getWidth();
		buttonHeight = arrowButton.getHeight();
		theLineY = findViewById(R.id.theLine).getTop();
	}

	/**
	 * Update the colour of the instruction, as per the register colours, when clicked               
	 * <p>
	 * @param Instruction, int ID of instruction
	 * @return void
	 */

	public void updateColour(Instruction instruction, int instructionID){

		ImageButton button = (ImageButton) findViewById(instructionID);
		Box inst = (Box) instruction;

		button.setImageResource(instructionIcons.getResourceId(inst.getRegister(), -1));		
	}

	/**
	 * Iterates through register buttons, getting their data from Game class.                   
	 * <p>
	 * @return void
	 */
	public void setRegisters(){

		for (int i = 0; i<maxRegisters; i++){

			int resID = registerIds[i];
			Button b = (Button) findViewById(resID);
			String data = game.getRegData(i) + "";
			b.setText(data);
		}
	}


	/**
	 * Takes click on register button and increments register                     
	 * <p>
	 * @param View. The button which has been clicked      
	 * @return void
	 */
	@Override
	public void onClick(View v) {

		int resid = v.getId();
		boolean done = false;

		for (int i = 0; i<maxRegisters; i++)
		{
			if (resid == registerIds[i])
			{
				game.incrementReg(i);
				done = true;
			}
		}

		if (!done)
		{
			if (resid == R.id.new_arrow_button || resid == R.id.new_box_button || resid == R.id.new_end_button)
			{
				Instruction instruction = game.newInstruction(resid);
				this.updateDisplay(instruction);

				//Can only run game, add arrows/ends, when there is already a box.
				if (!oneBox)
				{
					arrowButton.setClickable(true);
					endButton.setClickable(true);
					runButton.setClickable(true);
					oneBox = true;
				}
			}

			else if(resid == R.id.run_button)
			{
				game.runGame();
			}
		}
	}

	/**
	 * Takes long click on register button and zeros register                      
	 * <p>
	 * @param View. Button which has been clicked      
	 * @return boolean
	 */
	@Override
	public boolean onLongClick(View v) {

		boolean done = false;

		int resid = v.getId();

		for (int i = 0; i<maxRegisters; i++)
		{
			if (resid == registerIds[i])
			{
				game.zeroReg(i);
				done = true;
			}
		}

		if (!done){

			//ClipData data = ClipData.newPlainText("", "");
			DragShadowBuilder shadowBuilder = new View.DragShadowBuilder(v); //TODO - 2 different shadow builders, one with a line down, one with an arrow.

			v.startDrag(null, shadowBuilder, v, 0);
		}

		return true;
	}

	@Override
	public boolean onTouch(View v, MotionEvent me) {

		int resid = v.getId();
		final int THRESHOLD = 5;

		if (v instanceof ImageButton){
			switch (me.getAction() & MotionEvent.ACTION_MASK) {

			case MotionEvent.ACTION_DOWN:
				origX = me.getRawX();
				origY = me.getRawY();
				Log.d("This is what the Y is for the box", origY +"");
				Log.d("This is what Y is for the line", theLineY + "");
				clicked = true;
				break;

			case MotionEvent.ACTION_CANCEL:
				break;

			case MotionEvent.ACTION_UP:
				if (clicked) 
				{
					Instruction i = game.updateInstruction(resid);
					this.updateColour(i, resid);
				}

				else 
				{//TODO - This changes position every time.
					if (me.getY()<origY && me.getY()<theLineY)
					{
						Instruction instruction = game.changeInstruction(resid);
						this.updateDisplay(instruction);
					}

					else if (me.getY()>origY && me.getY()>theLineY)
					{
						Instruction instruction = game.changeInstruction(resid);
						this.updateDisplay(instruction);
					}	
				}
				break;

			case MotionEvent.ACTION_MOVE:
				if (Math.abs(origX - me.getX()) > THRESHOLD || Math.abs(me.getX()) - origX > THRESHOLD || Math.abs(me.getY() - origY) > THRESHOLD || Math.abs(origY - me.getY()) > THRESHOLD) {
					clicked = false;
				}
				break;

			default:

				break;
			}
		}
		return true;
	}

	@Override
	public boolean onDrag(View v, DragEvent de) {

		int resid = v.getId();
		v.setBackgroundColor(Color.BLUE);
		Instruction instruction = game.getInstruction(resid);
		Log.d("This is the instruction", instruction +  "");

		switch (de.getAction()){

		case DragEvent.ACTION_DRAG_STARTED:

			if (instruction instanceof Arrow){

				arrowX = de.getX();
				arrowY = de.getY();
				
				Log.d(arrowX + "", "true");
				Log.d(arrowY + "", "true");
				Log.d(theLineY + "", "true");
				
				if (arrowX < (v.getX() + v.getWidth()/2) && v.getY()>theLineY){

					arrowHead = true;
					Log.d("Arrowhead", "true");
				}

				else if (arrowX > (v.getX() + v.getWidth()/2) && v.getY()<theLineY){

					arrowHead = true;
				}

				else{

					arrowHead = false;
				}

				currentlyDragging = (Arrow) instruction;
			}
			break;

		case DragEvent.ACTION_DRAG_ENTERED:

			if (instruction instanceof Box){
				
				Instruction moved = (Box) instruction;
				Log.d("This is the instruction it moved to", moved + "");
			
				if (arrowHead){

					currentlyDragging.setTo(moved);		
					this.updateDisplay(moved);
				}

				else {
					
					Instruction succMoved = null;
					
					if (moved.getSucc() != null){
						
						succMoved = moved.getSucc();
					}
					
					moved.setSucc(currentlyDragging);
					currentlyDragging.setSucc(succMoved);
					succMoved.setPred(currentlyDragging);
					currentlyDragging.setPred(moved);
					this.updateDisplay(currentlyDragging);
					//TODO - and set succ of arrow.
				}
			}

			break;

		case DragEvent.ACTION_DRAG_EXITED:

			break;

		case DragEvent.ACTION_DRAG_ENDED:


		}

		return true;
	}		
}