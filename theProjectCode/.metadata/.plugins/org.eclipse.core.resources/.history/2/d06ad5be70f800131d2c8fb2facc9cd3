package com.jeanpower.reggieproject;

import android.view.MotionEvent;
import android.view.View;

public class UIDealings implements View.OnClickListener, View.OnLongClickListener, View.OnTouchListener{
	
	private Game game;
	private MainActivity caller;
	
	
	
	public UIDealings(Game g, MainActivity ma){
		
		game = g;
		caller = ma;
		
	}
	
	
	/**
	 * Takes click on register button and increments register                     
	 * <p>
	 * @param View. The button which has been clicked      
	 * @return void
	 */
	@Override
	public void onClick(View v) {

		int resid = v.getId();
		boolean done = false;

		for (int i = 0; i<game.MAXREGISTERS; i++)
		{
			if (resid == registerIds[i])
			{
				game.incrementReg(i);
				done = true;
			}
		}

		if (!done)
		{
			if (resid == R.id.new_arrow_button || resid == R.id.new_box_button || resid == R.id.new_end_button)
			{
				int prevInstructionId = game.newInstruction(resid);
				this.updateDisplay(prevInstructionId);
				
				//Can only run game, add arrows/ends, when there is already a box.
				if (!oneBox)
				{
					arrowButton.setClickable(true);
					endButton.setClickable(true);
					runButton.setClickable(true);
					oneBox = true;
				}
			}

			else if(resid == R.id.run_button)
			{
				game.runGame();
			}
		}
	}

	/**
	 * Takes long click on register button and zeros register                      
	 * <p>
	 * @param View. Button which has been clicked      
	 * @return boolean
	 */
	@Override
	public boolean onLongClick(View v) {

		int resid = v.getId();

		for (int i = 0; i< game.MAXREGISTERS; i++)
		{
			if (resid == registerIds[i])
			{
				game.zeroReg(i);
			}
		}
		return true;
	}

	@Override
	public boolean onTouch(View v, MotionEvent me) {

		int resid = v.getId();
		final float THRESHOLD = 13;

		switch (me.getAction() & MotionEvent.ACTION_MASK) {
		
		case MotionEvent.ACTION_DOWN:
			origX = me.getX();
			origY = me.getY();
			clicked = true;
			break;
			
		case MotionEvent.ACTION_CANCEL:
			
		case MotionEvent.ACTION_UP:
			if (clicked) 
			{
				Instruction i = game.updateInstruction(resid);
				this.updateColour(i, resid);
			}

			else 
			{
				if (me.getY()<origY && me.getY()<theLineY)
				{
					int prevInstructionId = game.changeInstruction(resid);
					this.updateDisplay(prevInstructionId);
				}

				else if (me.getY()>origY && me.getY()>theLineY)
				{
					int prevInstructionId = game.changeInstruction(resid);
					this.updateDisplay(prevInstructionId);
				}	
			}
			break;
		case MotionEvent.ACTION_MOVE:
			if (Math.abs(origX - me.getX()) > THRESHOLD || Math.abs(me.getX()) - origX > THRESHOLD || Math.abs(me.getY() - origY) > THRESHOLD || Math.abs(origY - me.getY()) > THRESHOLD) {
				clicked = false;
			}
			break;
		default:
			break;
		}
		return true;
	}	
	
	
	

}
