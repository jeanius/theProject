package com.jeanpower.reggieproject;


/**
 * Arrow model object
 * <p>
 * 
 * An arrow corresponds to either an increment or decrement/branch instruction.<p>
 * Holds attributes to relating to identity and position of Arrow within the doubly linked list 
 * of instructions, type of Arrow, where arrow is pointing, number of instructions arrow spans and
 *  action of Arrow when it is doing work.
 * <p>
 * Implements instruction interface.
 * <p>
 * Note: Does not hold drawing information, as this is controlled by MainActivity.
 * <p>
 * @author Jean Power 2014
 * 
 */

public class Arrow implements Instruction{

	private Instruction toInstruction;
	private Instruction pred;
	private Instruction succ;
	private Game caller;
	//private int register;
	private int identity;
	private boolean loop;
	private int spaces; //Corresponds to number of instructions between pred and to, allowing for correct length
	
	/**
	 * Constructor.
	 * 
	 * @param Game - calling class.
	 */
	public Arrow(Game g){

		caller = g;
		succ = null;
		pred = null;
		loop = true;
		spaces = 1;
	}

	@Override
	public void doWork() {

		if (loop)
		{
			if (pred instanceof Box){
				Box box = (Box) pred;

				if (!box.getType()){

					if (!box.decDone()){
						caller.setCurrPos(succ);
					}

					else
					{
						caller.setCurrPos(toInstruction);
					}
				}
				else {
					caller.setCurrPos(toInstruction);
				}
			}
		}

		else
		{
			if (pred instanceof Box){

				Box box = (Box) pred;

				if (!box.decDone()){
					caller.setCurrPos(toInstruction);
				}

				else
				{
					caller.setCurrPos(succ);
				}
			}

			else {
				caller.setCurrPos(null);
			}
		}
	}

	@Override
	public void setSucc(Instruction successor) {
		succ = successor;
	}

	@Override
	public Instruction getSucc() {

		return succ;
	}

	@Override
	public void setPred(Instruction predecessor) {
		pred = predecessor;

		if (pred != null){
			register = pred.getRegister();
		}
	}

	public void calculateSpaces(){

		int count = 1; 
		Instruction currPos;

		if (loop){

			currPos = pred;


			while (currPos != null && currPos.getId() != toInstruction.getId()){


				if (currPos instanceof Box) {
					count ++;
				}

				currPos = currPos.getPred();
			}
		}

		else {

			if (pred.getId() != toInstruction.getId()){

				currPos = pred;

				while (currPos != null && currPos.getId() != toInstruction.getId()){
					currPos = currPos.getSucc();

					if (currPos instanceof Box) {
						count ++;
					}
				}
			}
		}

		spaces = count;
	}

	public int getSpaces(){
		return spaces;
	}

	@Override
	public Instruction getPred() {
		return pred;

	}

	//@Override
	//public void setRegister() {
	//}

	//@Override
	//public int getRegister() {
	//	return register;
	//}

	@Override
	public void setId(int ID) {
		identity = ID;
	}

	@Override
	public int getId() {
		return identity;
	}

	public boolean getType(){
		return loop;
	}

	public void setType(){

		if (loop)
		{
			loop = false;
		}

		else 
		{
			loop = true;
		}
	}

	public void setTo(Instruction to){
		toInstruction = to;
	}

	public Instruction getTo(){
		return toInstruction;
	}
}
