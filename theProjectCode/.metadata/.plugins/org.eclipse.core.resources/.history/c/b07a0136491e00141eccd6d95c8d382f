
package com.jeanpower.reggieproject;

import android.graphics.Bitmap;
import android.graphics.Canvas;
import android.graphics.CornerPathEffect;
import android.graphics.LinearGradient;
import android.graphics.Paint;
import android.graphics.Path;
import android.graphics.PathEffect;
import android.util.Log;
import android.view.View;
import android.graphics.Shader;

public class DrawArrow {
	Paint paint = new Paint();
	Path path = new Path();
	int startColour;
	int endColour;
	LinearGradient lg;
	int numberButtons;
	Arrow arrow;
	boolean loop;
	float arrowWidth;
	float arrowHeight;

	public DrawArrow(Arrow a, int width, int height){

		paint.setStrokeWidth(6);
		paint.setStyle(Paint.Style.STROKE); 
		arrow = a;
		numberButtons = arrow.getSpaces();
		loop = arrow.getType();
		arrowWidth = width;
		arrowHeight = height/2; //Smaller than the instruction buttons.
	}

	public Bitmap getImage(){

		Bitmap bitmap = Bitmap.createBitmap(((int) arrowWidth * numberButtons), (int) arrowHeight, Bitmap.Config.ALPHA_8);
		Canvas canvas = new Canvas(bitmap);

		if (loop){
			
			if (numberButtons <= 1){
				path.moveTo((arrowWidth * numberButtons)/2 + arrowWidth/4, arrowHeight);
				path.lineTo((arrowWidth * numberButtons)/2, arrowHeight/2);
				path.lineTo((arrowWidth * numberButtons)/2 + arrowWidth/4, 0);
			}

			else {
				path.moveTo(arrowWidth, arrowHeight);
				path.lineTo(arrowWidth, arrowHeight/2);
				path.lineTo((arrowWidth * numberButtons)/2, arrowHeight/2);
				path.lineTo((arrowWidth * numberButtons)/2 + arrowWidth/4, arrowHeight);
				path.lineTo((arrowWidth * numberButtons)/2, arrowHeight/2);
				path.lineTo((arrowWidth * numberButtons)/2 + arrowWidth/4, 0);
				path.lineTo((arrowWidth * numberButtons)/2, arrowHeight/2);
				path.lineTo((arrowWidth * numberButtons) - arrowWidth/3, arrowHeight/2);
				path.lineTo((arrowWidth * numberButtons) - arrowWidth/3, arrowHeight);

				
			}

		}

		else {

			if (numberButtons <= 1){
				path.moveTo((arrowWidth * numberButtons)/2, arrowHeight);
				path.lineTo((arrowWidth * numberButtons)/2 + arrowWidth/4, arrowHeight/2);
				path.lineTo((arrowWidth * numberButtons)/2, 0);

			}
			
			else {
				path.moveTo(arrowWidth/3, 0);
				path.lineTo(arrowWidth/3, arrowHeight/2);
				path.lineTo((arrowWidth * numberButtons)/2 + arrowWidth/4, arrowHeight/2);
				
				path.lineTo((arrowWidth * numberButtons)/2, arrowHeight);
				path.lineTo((arrowWidth * numberButtons)/2 + arrowWidth/4, arrowHeight/2);
				path.lineTo((arrowWidth * numberButtons)/2, 0);
				path.lineTo((arrowWidth * numberButtons)/2 + arrowWidth/4, arrowHeight/2);
				
				path.lineTo((arrowWidth * numberButtons) - arrowWidth/3, arrowHeight/2);
				path.lineTo((arrowWidth * numberButtons) - arrowWidth/3, 0);
			}
		}

		PathEffect effect = new CornerPathEffect(3.0f);
		paint.setPathEffect(effect);

		canvas.drawPath(path, paint);

		return bitmap;
	}
}