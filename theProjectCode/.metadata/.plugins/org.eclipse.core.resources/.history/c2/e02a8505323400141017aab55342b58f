package com.jeanpower.reggieproject.test;


import junit.framework.Assert;
import android.test.ActivityInstrumentationTestCase2;
import android.test.ViewAsserts;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.ImageButton;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;

import com.jeanpower.reggieproject.Arrow;
import com.jeanpower.reggieproject.Box;
import com.jeanpower.reggieproject.End;
import com.jeanpower.reggieproject.Instruction;
import com.jeanpower.reggieproject.MainActivity;
import com.jeanpower.reggieproject.R;


/**
 * JUnit tests of MainActivity.<p>
 * 
 * 1) Setters are not tested; trivial assignment of instance variables.<br>
 * 2) Getters are not tested; trivial returning instance variables.<br>
 * 3) updateColour() not tested, as verified on screen<br>
 * 
 * Tests completed:<br>
 * 1) onCreate()<br>
 * 2) layoutConstants()<br>
 * 3) addToScreen()/removeInstruction()<br>
 * 4) setRegisters()/onClick()/onLongClick()<br>

 * @author Jean Power 2014
 */
public class MainActivityTest extends ActivityInstrumentationTestCase2<MainActivity>{

	MainActivity main;
	RelativeLayout actionFrame;
	ImageButton ib;

	public MainActivityTest(){
		super(MainActivity.class);
	}

	public void setUp() throws Exception{
		super.setUp();
		main = getActivity();		
		actionFrame = (RelativeLayout) main.findViewById(R.id.actionFrame);
	}

	/**
	 * Tests onCreate() method<p>
	 * 
	 * 1) Ensures all views present, except sizer which is dynmically added<br>
	 * 2) Checks no child is null<br>
	 * 3) Ensures activity is not null<br>
	 */
	public void testOnCreate(){

		LinearLayout registerFrame = (LinearLayout) main.findViewById(R.id.register_frame);
		RelativeLayout bottomFrame = (RelativeLayout) main.findViewById(R.id.bottom_frame);

		//bottom frame		
		ViewAsserts.assertGroupContains(bottomFrame, main.findViewById(R.id.new_box_button));
		ViewAsserts.assertGroupContains(bottomFrame, main.findViewById(R.id.new_arrow_button));
		ViewAsserts.assertGroupContains(bottomFrame, main.findViewById(R.id.new_end_button));
		ViewAsserts.assertGroupContains(bottomFrame, main.findViewById(R.id.run_button));
		ViewAsserts.assertGroupContains(bottomFrame, main.findViewById(R.id.bin_clear_button));

		//register frame
		ViewAsserts.assertGroupContains(registerFrame, main.findViewById(R.string.Register0));
		ViewAsserts.assertGroupContains(registerFrame, main.findViewById(R.string.Register1));
		ViewAsserts.assertGroupContains(registerFrame, main.findViewById(R.string.Register2));
		ViewAsserts.assertGroupContains(registerFrame, main.findViewById(R.string.Register3));
		ViewAsserts.assertGroupContains(registerFrame, main.findViewById(R.string.Register4));
		ViewAsserts.assertGroupContains(registerFrame, main.findViewById(R.string.Register5));
		ViewAsserts.assertGroupContains(registerFrame, main.findViewById(R.string.Register6));
		ViewAsserts.assertGroupContains(registerFrame, main.findViewById(R.string.Register7));
		ViewAsserts.assertGroupContains(registerFrame, main.findViewById(R.string.Register8));
		ViewAsserts.assertGroupContains(registerFrame, main.findViewById(R.string.Register9));

		//action frame
		ViewAsserts.assertGroupContains(actionFrame, main.findViewById(R.id.theLine));

		ViewAsserts.assertGroupIntegrity(actionFrame);
		ViewAsserts.assertGroupIntegrity(registerFrame);
		ViewAsserts.assertGroupIntegrity(bottomFrame);

		assertNotSame("Activity is not null", null, main);
	}

	/**
	 * Tests layoutConstants() method<p>
	 * 
	 * 1) Sizer confirmed to be on screen, as sizes can be set<br>
	 * 2) Width has non-zero value<br>
	 * 3) Height has non-zero value<br>
	 * 4) theLineY has non-zero value<br>
	 * 
	 * NB: setLayoutConstants() is called from getWidth/getHeight/getLineY methods<br>
	 */
	public void testLayoutConstant(){

		boolean widthNotZero = main.getWidth() > 0;
		boolean heightNotZero = main.getHeight() > 0;
		boolean lineNotZero = main.getLineY() > 0;

		assertEquals("Width is not zero", true, widthNotZero);
		assertEquals("Height is not zero", true, heightNotZero);
		assertEquals("Line Y is not zero", true, lineNotZero);	
	}

	/**
	 * Tests addToScreen()/removeFromScreen()
	 * 
	 * 1) Adds ImageButton to screen<br>
	 * 2) Removes ImageButton from screen<br>
	 */
	public void testAddRemove(){

		actionFrame = (RelativeLayout) main.findViewById(R.id.actionFrame);
		ImageButton ib =  new ImageButton(main);
		main.addToScreen(ib);
		ib.setId(256);

		getInstrumentation().waitForIdleSync();

		ViewAsserts.assertGroupContains(actionFrame, main.findViewById(ib.getId()));

		main.removeInstruction(ib.getId());

		getInstrumentation().waitForIdleSync();

		ViewAsserts.assertGroupNotContains(actionFrame, main.findViewById(ib.getId()));
	}

	/**
	 * Tests onClick(), onLongClick(), setRegisters()
	 * 
	 * 1) setRegisters is called as part of onClick() on a register<br>
	 * 2) Checks that click increments Register 1, and Register 5.
	 * 3) Checks that long click zeros registers
	 * 4) Clicks on box, arrow and end - verifies these are added
	 */
	public void testOnClickSetReg(){

		main.runOnUiThread(new Runnable() {
			@Override
			public void run() {

				//Register 1
				View register1 = main.findViewById(R.string.Register0);
				Button regBut1 = (Button) register1;

				int data1 = Integer.parseInt(regBut1.getText().toString());
				assertEquals("Register 1 has 0", 0, data1);

				register1.performClick();

				data1 = Integer.parseInt(regBut1.getText().toString());
				assertEquals("Register 1 has 1", 1, data1);

				//Register 5
				View register5 = main.findViewById(R.string.Register5);
				Button regBut5 = (Button) register5;

				int data5 = Integer.parseInt(regBut5.getText().toString());
				assertEquals("Register 5 has 0", 0, data5);

				register5.performClick();
				register5.performClick();
				register5.performClick();

				data5 = Integer.parseInt(regBut5.getText().toString());
				assertEquals("Register 5 has 3", 3, data5);

				//Long Click
				register1.performLongClick();
				register5.performLongClick();

				data1 = Integer.parseInt(regBut1.getText().toString());
				assertEquals("Register 1 has 0", 0, data1);

				data5 = Integer.parseInt(regBut5.getText().toString());
				assertEquals("Register 5 has 0", 0, data5);

				//Click on instruction icons
				View box = main.findViewById(R.id.new_box_button);
				View arrow = main.findViewById(R.id.new_arrow_button);
				View end = main.findViewById(R.id.new_end_button);
				View bin = main.findViewById(R.id.bin_clear_button);

				int [] childIDs = helper();

				for (int i = 0; i < 10; i++){
					Instruction found = main.getGame().getInstruction(childIDs[i]);
					assertEquals("No instruction on screen prior to click", null, found);
				}

				box.performClick();
				childIDs = helper();

				for (int i = 0; i < 10; i++){
					Instruction found = main.getGame().getInstruction(childIDs[i]);

					if (found != null){
						assertEquals("Instruction is instanceof Box", true, found instanceof Box);
					}
					else if (found instanceof Arrow){
						Assert.fail("Arrow present");
					}
					else if (found instanceof End){
						Assert.fail("End present");
					}
				}

				arrow.performClick();
				childIDs = helper();

				for (int i = 0; i < 10; i++){
					Instruction found = main.getGame().getInstruction(childIDs[i]);

					if (found != null){
						if (found instanceof Arrow){
							assertEquals("Instruction is instanceof Arrow", true, found instanceof Arrow);
						}
						else if (found instanceof Box){
							assertEquals("Instruction is instanceof Arrow", true, found instanceof Box);
						}
						else if (found instanceof End){
							Assert.fail("End is present");
						}
					}
				}

				end.performClick();
				childIDs = helper();

				for (int i = 0; i < 10; i++){
					Instruction found = main.getGame().getInstruction(childIDs[i]);

					if (found != null){
						if (found instanceof Arrow){
							assertEquals("Instruction is instanceof Arrow", true, found instanceof Arrow);
						}
						else if (found instanceof Box){
							assertEquals("Instruction is instanceof Arrow", true, found instanceof Box);
						}
						else if (found instanceof End){
							assertEquals("Instruction is instanceof End", true, found instanceof End);
						}

					}
				}

				bin.performClick();
				childIDs = helper();

				for (int i = 0; i < 10; i++){
					Instruction found = main.getGame().getInstruction(childIDs[i]);

					if (found != null){
						if (found instanceof Arrow){
							Assert.fail("Arrow still present");
						}
						else if (found instanceof Box){
							Assert.fail("Box still present");
						}
						else if (found instanceof End){
							Assert.fail("End still present");
						}

					}
				}

			}
		});
	}

	public int[] helper(){

		int [] childIDs = new int[10];

		for (int i = 0; i < actionFrame.getChildCount(); i++) {
			View child = actionFrame.getChildAt(i);
			childIDs[i] = child.getId();
		}

		return childIDs;

	}

}