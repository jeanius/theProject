package com.jeanpower.reggieproject.test;

import java.util.Calendar;

import android.content.Intent;
import android.test.ActivityInstrumentationTestCase2;
import android.test.ViewAsserts;
import android.util.Log;
import android.widget.ImageButton;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;

import com.jeanpower.reggieproject.MainActivity;
import com.jeanpower.reggieproject.R;


/**
 * JUnit tests of MainActivity.<p>
 * 
 * Tests completed:<br>
 * 1) onCreate()<br>
 * 2) layoutConstants()<br>

 * @author Jean Power 2014
 */
public class MainActivityTest extends ActivityInstrumentationTestCase2<MainActivity>{

	MainActivity main;
	RelativeLayout actionFrame;
	ImageButton ib;

	public MainActivityTest(){
		super(MainActivity.class);
	}

	public void setUp() throws Exception{
		super.setUp();
		main = getActivity();		

	}
	
	/**
	 * Tests onCreate() method<p>
	 * 
	 * 1) Ensures all views present, except sizer which is dynmically added<br>
	 * 2) Checks no child is null<br>
	 * 3) Ensures activity is not null<br>
	 */
	public void testOnCreate(){

		LinearLayout registerFrame = (LinearLayout) main.findViewById(R.id.register_frame);
		RelativeLayout bottomFrame = (RelativeLayout) main.findViewById(R.id.bottom_frame);
		
		//bottom frame		
		ViewAsserts.assertGroupContains(bottomFrame, main.findViewById(R.id.new_box_button));
		ViewAsserts.assertGroupContains(bottomFrame, main.findViewById(R.id.new_arrow_button));
		ViewAsserts.assertGroupContains(bottomFrame, main.findViewById(R.id.new_end_button));
		ViewAsserts.assertGroupContains(bottomFrame, main.findViewById(R.id.run_button));
		ViewAsserts.assertGroupContains(bottomFrame, main.findViewById(R.id.bin_clear_button));
		
		//register frame
		ViewAsserts.assertGroupContains(registerFrame, main.findViewById(R.string.Register0));
		ViewAsserts.assertGroupContains(registerFrame, main.findViewById(R.string.Register1));
		ViewAsserts.assertGroupContains(registerFrame, main.findViewById(R.string.Register2));
		ViewAsserts.assertGroupContains(registerFrame, main.findViewById(R.string.Register3));
		ViewAsserts.assertGroupContains(registerFrame, main.findViewById(R.string.Register4));
		ViewAsserts.assertGroupContains(registerFrame, main.findViewById(R.string.Register5));
		ViewAsserts.assertGroupContains(registerFrame, main.findViewById(R.string.Register6));
		ViewAsserts.assertGroupContains(registerFrame, main.findViewById(R.string.Register7));
		ViewAsserts.assertGroupContains(registerFrame, main.findViewById(R.string.Register8));
		ViewAsserts.assertGroupContains(registerFrame, main.findViewById(R.string.Register9));
		
		//action frame
		ViewAsserts.assertGroupContains(actionFrame, main.findViewById(R.id.theLine));
		
		
		ViewAsserts.assertGroupIntegrity(actionFrame);
		ViewAsserts.assertGroupIntegrity(registerFrame);
		ViewAsserts.assertGroupIntegrity(bottomFrame);
		
		assertNotSame("Activity is not null", null, main);
	}
	
	/**
	 * Tests layoutConstants() method<p>
	 * 
	 * 1) Sizer confirmed to be on screen, as sizes can be set<br>
	 * 2) Width has non-zero value<br>
	 * 3) Height has non-zero value<br>
	 * 4) theLineY has non-zero value<br>
	 * 
	 * NB: setLayoutConstants() is called from getWidth/getHeight/getLineY methods<br>
	 */
	public void testLayoutConstant(){
		
		boolean widthNotZero = main.getWidth() > 0;
		boolean heightNotZero = main.getHeight() > 0;
		boolean lineNotZero = main.getLineY() > 0;
		
		assertEquals("Width is not zero", true, widthNotZero);
		assertEquals("Height is not zero", true, heightNotZero);
		assertEquals("Line Y is not zero", true, lineNotZero);	
	}

	/**
	 * Tests addToScreen()/removeFromScreen()
	 * 
	 * 
	 */
	
	public void testAddToScreen(){
		
		actionFrame = (RelativeLayout) main.findViewById(R.id.actionFrame);
		ImageButton ib =  new ImageButton(main);
		main.addToScreen(ib);
		int id = ib.getId();
		Log.d("This is id", id +"");

		getInstrumentation().waitForIdleSync();
		
		long startTime = Calendar.getInstance().getTimeInMillis();
		long time = 2000;
		long waiting = startTime + time;
		boolean done = false;
		
		while (!done){
			 
			if (Calendar.getInstance().getTimeInMillis() > waiting){
				done = true;
			}
		}
		
		ViewAsserts.assertGroupContains(actionFrame, main.findViewById(ib.getId()));

	}
	

}