package com.jeanpower.reggieproject;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.Reader;
import java.util.ArrayList;
import java.util.Scanner;
import android.annotation.SuppressLint;
import android.app.Activity;
import android.app.Dialog;
import android.content.Context;
import android.content.ContextWrapper;
import android.os.Build;
import android.os.Environment;
import android.util.Log;
import android.view.View;
import android.widget.Toast;
import ar.com.daidalos.afiledialog.FileChooserDialog;
import ar.com.daidalos.afiledialog.FileChooserLabels;

public class SaveLoad{

	Game game;
	Context context;

	public SaveLoad(Context c, Game g){
		context = c;
		game = g;
	}

	public void saveLoad(){

		FileChooserDialog dialog = new FileChooserDialog(context);
		dialog.setCanCreateFiles(true);
		dialog.setFilter(".*txt");
		dialog.setShowFullPath(true);
		dialog.loadFolder(Environment.getExternalStorageDirectory() + "/Documents/");
		FileChooserLabels labels = new FileChooserLabels();
		labels.createFileDialogTitle = "Save Game";
		labels.createFileDialogMessage = "Enter game name";
		labels.labelAddButton = "Navigate to file or click here to save current game";
		dialog.setLabels(labels);
		dialog.addListener(new FileChooserDialog.OnFileSelectedListener() {

			public void onFileSelected(Dialog source, File file) {
				source.hide();

				Toast toast = Toast.makeText(source.getContext(), "File selected: " + file.getName(), Toast.LENGTH_LONG);

				loadGame(file);
				((MainActivity) MainActivity.act).updateDisplay();

				toast.show();
			}
			public void onFileSelected(Dialog source, File folder, String name) {
				source.hide();
				String filename = name + ".txt";
				File output = new File(folder, filename);
				FileOutputStream fw = null;

				try {			
					fw = new FileOutputStream(output);


					byte[] filedata = createGameText().getBytes();
					fw.write(filedata);
					fw.close();
				}
				catch (Exception e){
					Log.d("exception", e +"");
					Log.e("exception", Log.getStackTraceString(e));
				}

				if (null != fw){
					Toast toast = Toast.makeText(source.getContext(), "File created: " + folder.getName() + "/" + name, Toast.LENGTH_SHORT);
					toast.show();
				}

				if (null == fw){
					Toast toast = Toast.makeText(source.getContext(), "You need to save to a storage folder, like 'Documents'", Toast.LENGTH_LONG);
					toast.show();
				}
			}
		});

		dialog.show();

	}

	public void load(){

	}

	public String createGameText(){

		int counter = 0;
		ArrayList<Instruction> instructionList = game.getInstructionList();
		int numIns = instructionList.size();

		String [] strings = new String[numIns];
		int [] boxEndIDs = new int[numIns];
		//TODO - Sort list, rather than iterating through 3 times?

		for (Instruction i: instructionList){

			if (i instanceof Box){

				StringBuilder sb = new StringBuilder();

				Box box = (Box) i;

				sb.append(counter + ",");

				if (box.getType()){
					sb.append("INC,");
				}

				else {
					sb.append("DEB,");
				}

				sb.append(box.getRegister() + ",");

				Instruction successor = box.getSucc();
				Instruction succOfSucc = null;

				if (null != successor){
					succOfSucc = box.getSucc().getSucc();
				}

				if (box.getType() && (successor instanceof Box || successor instanceof End)){
					sb.append(counter + 1 + ",");
				}

				else if (!box.getType() && successor instanceof Arrow){

					if (succOfSucc instanceof Box || succOfSucc instanceof End){
						sb.append(counter + 1 + ",");
					}
				}

				else if (!box.getType() && successor instanceof End){

					if (null != succOfSucc){
						sb.append(counter + 2 + ",");
					}
					else {
						sb.append(",");
					}

					sb.append(counter + 1 + ",");
				}

				strings[counter] = sb.toString();
				boxEndIDs[counter] = box.getId();

				counter++;
			}

			else if (i instanceof End){

				StringBuilder sb = new StringBuilder();

				sb.append(counter + ",");

				sb.append("END");
				strings[counter] = sb.toString();
				boxEndIDs[counter] = i.getId();

				counter++;
			}
		}

		for (Instruction i: instructionList){

			if (i instanceof Arrow){

				Arrow curr = (Arrow) i;

				if (curr.getType()){

					Arrow pred = null;
					Instruction predBox = curr.getPred();
					int predID = curr.getPred().getId();
					int goToId = curr.getTo().getId();
					int predIndex = 0;
					int goToIndex = 0;

					if (curr.getPred() instanceof Arrow){
						pred = (Arrow) curr.getPred();	
					}

					while (predBox instanceof Arrow || predBox instanceof End){
						predBox = predBox.getPred();
						predID = predBox.getId();
					}

					for (int j = 0; j<numIns; j++){

						int checkID = boxEndIDs[j];

						if (checkID == predID){
							predIndex = j;
						}
						if (checkID == goToId){
							goToIndex = j;
						}
					}

					if ((curr.getPred() instanceof Box || curr.getPred() instanceof End) || (null !=pred && (curr.getType() != pred.getType()))){ //If more than one same type of arrow out of same box, ignored.

						String predString = strings[predIndex];

						StringBuilder sb = new StringBuilder();

						sb.append(predString);
						sb.append(goToIndex + ",");

						strings[predIndex] = sb.toString();
					}
				}
			}
		}

		for (Instruction i: instructionList){

			if (i instanceof Arrow){

				Arrow curr = (Arrow) i;

				if (!curr.getType()){

					Arrow pred = null;
					Instruction predBox = curr.getPred();
					int predID = curr.getPred().getId();
					int goToId = curr.getTo().getId();
					int predIndex = 0;
					int goToIndex = 0;

					if (curr.getPred() instanceof Arrow){
						pred = (Arrow) curr.getPred();	
					}

					while (predBox instanceof Arrow || predBox instanceof End){
						predBox = predBox.getPred();
						predID = predBox.getId();
					}

					for (int j = 0; j<numIns; j++){

						int checkID = boxEndIDs[j];

						if (checkID == predID){
							predIndex = j;
						}
						if (checkID == goToId){
							goToIndex = j;
						}
					}

					if ((curr.getPred() instanceof Box || curr.getPred() instanceof End) || (i.getPred() instanceof Arrow && curr.getType() != pred.getType())){ //If more than one arrow out of same box, ignored.

						String predString = strings[predIndex];

						StringBuilder sb = new StringBuilder();

						sb.append(predString);
						sb.append(goToIndex + ",");

						strings[predIndex] = sb.toString();

					}
				}
			}
		}

		StringBuilder resultSB = new StringBuilder();

		for (int j = 0; j<numIns; j++){

			if (null != strings[j]){
				resultSB.append(strings[j] + System.getProperty("line.separator"));
			}
		}

		return resultSB.toString();

	}


	@SuppressLint("NewApi")
	public String loadGame(File file){

		int counter = 0;
		String [] instructionInput = null;
		Scanner scan = null;
		Scanner scanner = null;
		Instruction [] instructionArray = null;

		try {
			try{
				scan = new Scanner(file);
				scanner = new Scanner(file);

				while (scan.hasNextLine()){
					counter ++;
					scan.nextLine();
				}

				instructionInput = new String[counter];
				counter = 0;

				while (scanner.hasNextLine()){
					instructionInput[counter] = scanner.nextLine();
					counter ++;
				}
			}

			finally {
				if (null != scan){
					scan.close();
				}
				if (null != scanner){
					scanner.close();
				}
			}
		}

		catch (Exception e) {
			Log.d("Exception", e +"");
			Log.e("exception", Log.getStackTraceString(e));
		}

		boolean issue = false;
		for (int i = 0; i<counter; i++){

			String instructionText = instructionInput[i];
			String [] tokens = instructionText.split(",");

			if (tokens.length > 5 || tokens.length < 1){
				Toast toast = Toast.makeText(context, "Incorrect data on line" + i + ". Each line should have no more than 5 pieces of data, separated by commas", Toast.LENGTH_LONG);
				toast.show();
				issue = true;
			}	

			//for (int j = 0; j<tokens.length; j++){
			//	Log.d(tokens[j] + "", " ");
			//	}
			//Log.d("DONE", "DONE");
		}

		if (!issue){

			instructionArray = new Instruction[counter];

			boolean done = true;
			for (int i = 0; i<counter; i++){

				String instructionText = instructionInput[i];
				String [] tokens = instructionText.split(",");

				String instruction = tokens[1];
				int register = -1;

				if (instruction.equals("INC") || instruction.equals("DEB")){
					try {
						register = Integer.parseInt(tokens[2]);
					}
					catch(Exception e){
						Toast toast = Toast.makeText(context, "Incorrect data for step " + i + ". Register must be a number.", Toast.LENGTH_LONG);
						done = false;
						toast.show();
					}			

					if (register >= game.getMaxReg() || register<0){
						Toast toast = Toast.makeText(context, "Incorrect data for step " + i + ". Register must be a number between 0 and 9.", Toast.LENGTH_LONG);
						done = false;
						toast.show();
					}
				}

				if (done){

					if (instruction.equals("END")){
						End end = new End(game);
						instructionArray[i] = end;
					}
					else if (instruction.equals("INC") || instruction.equals("DEB")){

						Box box = new Box(game);
						box.changeRegister(register);

						if (instruction.equals("DEB")){
							box.setType();
						}
						instructionArray[i] = box;
					}	

					else{
						Toast toast = Toast.makeText(context, "Incorrect data for step " + i + ". Must use a INC, DEB or END as instruction type", Toast.LENGTH_LONG);
						instructionArray = null;
						toast.show();
					}
				}
			}

			if (null != instructionArray){

				for (int i = 0; i<counter; i++){

					String instructionText = instructionInput[i];
					String [] tokens = instructionText.split(",");

					int goTo = -1;
					int branch = -1;

					boolean ok = true;

					if (instructionArray[i] instanceof Box){

						Box box = (Box) instructionArray[i];

						try {
							goTo = Integer.parseInt(tokens[3]);
						}
						catch(Exception e){
							Toast toast = Toast.makeText(context, "Incorrect data for step" + i + ". Go To step must be a number.", Toast.LENGTH_LONG);
							ok = false;
							toast.show();
						}			

						if (!box.getType())

							try {
								branch = Integer.parseInt(tokens[4]);
							}

						catch(Exception e){
							Toast toast = Toast.makeText(context, "Incorrect data for step" + i + ". Branch step must be a number.", Toast.LENGTH_LONG);
							ok = false;
							toast.show();
						}	
					}

					if ((goTo >= counter || branch >= counter ||goTo <0) && instructionArray[i] instanceof Box){

						Toast toast = Toast.makeText(context, "Incorrect data for step" + i + ". Go To/Branch must be a step number.", Toast.LENGTH_LONG);
						ok = false;
						toast.show();
					}

					if ((branch < 0) && instructionArray[i] instanceof Box){

						Box box = (Box) instructionArray[i];

						if (!box.getType()){

							Toast toast = Toast.makeText(context, "Incorrect data for step" + i + ". Go To/Branch must be a step number.", Toast.LENGTH_LONG);
							ok = false;
							toast.show();
						}
					}

					Log.d("Goto", goTo +"");
					Log.d("branch", branch + "");

					if (ok){

						Instruction inst = instructionArray[i];

						if (null != inst){

							if (Build.VERSION.SDK_INT >= 17) {
								inst.setId(View.generateViewId());
							}

							else {
								inst.setId(Util.generateViewId());
							}

							Instruction succ = null;

							if ((i+1)<counter){

								succ = instructionArray[i+1];
							}
							
							inst.setSucc(succ);
							
							if (goTo >= 0 && (goTo < i+1 || goTo > i+i)){

									Arrow arrow = new Arrow (game);

									if (Build.VERSION.SDK_INT >= 17) {
										arrow.setId(View.generateViewId());
									}

									else {
										arrow.setId(Util.generateViewId());
									}

									inst.setSucc(arrow);
									succ = arrow;
									arrow.setSucc(succ);
									arrow.setPred(inst);

									if (null !=succ){
										succ.setPred(arrow);
									}

									arrow.setTo(instructionArray[goTo]);
								}
						

							if (branch >= 0){

								Arrow arrow = new Arrow (game);
								arrow.setType();

								if (Build.VERSION.SDK_INT >= 17) {
									arrow.setId(View.generateViewId());
								}

								else {
									arrow.setId(Util.generateViewId());
								}

								arrow.setTo(instructionArray[branch]);
								
								Instruction succOfSucc = succ.getSucc();

								if (succ instanceof Box || succ instanceof Arrow){
									succ.setSucc(arrow);
									arrow.setPred(succ);
									arrow.setSucc(succOfSucc);

									if (null != succOfSucc){
										succOfSucc.setPred(arrow);	
									}
								}
							}
						}

						game.setFirst(instructionArray[0]);
						game.setLastBox(instructionArray[counter-1]);
						Instruction last = instructionArray[counter-1];

						while (null !=last){
							game.setLast(last);
							last = last.getSucc();
						}

					}
				}
			}
		}

		//Todo - reset last
		return null;
	}
}
